
---
addons:
- exclude:
    jobs:
    - name: smoke_tests
      release: cf-smoke-tests
  include:
    stemcell:
    - os: opensuse-42.3
  jobs:
  - name: loggregator_agent
    properties:
      disable_udp: true
      grpc_port: 3459
      loggregator:
        tls:
          agent:
            cert: ((loggregator_tls_agent.certificate))
            key: ((loggregator_tls_agent.private_key))
          ca_cert: ((loggregator_ca.certificate))
      quarks:
        envs:
        - name: AGENT_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: AGENT_INDEX
          value: "0"
    release: loggregator-agent
  - name: loggr-expvar-forwarder
    properties:
      counters:
      - addr: http://127.0.0.1:14823/debug/vars
        name: ingress
        source_id: forwarder_agent
        tags:
          metric_version: "2.0"
        template: '{{.ForwarderAgent.IngressV2}}'
      - addr: http://127.0.0.1:14824/debug/vars
        name: dropped
        tags:
          origin: loggregator.metron
        template: '{{.Agent.Dropped}}'
      - addr: http://127.0.0.1:14824/debug/vars
        name: dropped
        tags:
          direction: egress
          metric_version: "2.0"
          origin: loggregator.metron
        template: '{{.Agent.DroppedEgressV2}}'
      - addr: http://127.0.0.1:14824/debug/vars
        name: dropped
        tags:
          direction: ingress
          metric_version: "2.0"
          origin: loggregator.metron
        template: '{{.Agent.DroppedIngressV2}}'
      - addr: http://127.0.0.1:14824/debug/vars
        name: egress
        tags:
          origin: loggregator.metron
        template: '{{.Agent.Egress}}'
      - addr: http://127.0.0.1:14824/debug/vars
        name: egress
        tags:
          metric_version: "2.0"
          origin: loggregator.metron
        template: '{{.Agent.EgressV2}}'
      - addr: http://127.0.0.1:14824/debug/vars
        name: ingress
        tags:
          origin: loggregator.metron
        template: '{{.Agent.Ingress}}'
      - addr: http://127.0.0.1:14824/debug/vars
        name: ingress
        tags:
          metric_version: "2.0"
          origin: loggregator.metron
        template: '{{.Agent.IngressV2}}'
      default_source_id: metron
      gauges:
      - addr: http://127.0.0.1:14824/debug/vars
        name: average_envelopes
        tags:
          loggregator: v1
          origin: loggregator.metron
        template: '{{.Agent.AverageEnvelope}}'
        unit: bytes/minute
      - addr: http://127.0.0.1:14824/debug/vars
        name: average_envelopes
        tags:
          loggregator: v2
          metric_version: "2.0"
          origin: loggregator.metron
        template: '{{.Agent.AverageEnvelopeV2}}'
        unit: bytes/minute
      - addr: http://127.0.0.1:14824/debug/vars
        name: origin_mappings
        tags:
          metric_version: "2.0"
          origin: loggregator.metron
        template: '{{.Agent.OriginMappingsV2}}'
        unit: bytes/minute
      log_agent:
        ca_cert: ((loggregator_ca.certificate))
        client_cert: ((expvar_forwarder.certificate))
        client_key: ((expvar_forwarder.private_key))
    release: loggregator-agent
  name: loggregator_agent
- include:
    stemcell:
    - os: opensuse-42.3
  jobs:
  - name: loggr-forwarder-agent
    properties:
      tls:
        ca_cert: ((loggregator_ca.certificate))
        cert: ((loggregator_tls_agent.certificate))
        key: ((loggregator_tls_agent.private_key))
    release: loggregator-agent
  name: forwarder_agent
instance_groups:
- instances: 1
  jobs:
  - name: nats
    properties:
      nats:
        password: ((nats_password))
        user: nats
      quarks:
        ports:
        - internal: 4222
          name: nats
          protocol: TCP
        - internal: 4223
          name: nats-routes
          protocol: TCP
        run:
          healthcheck:
            nats:
              readiness:
                exec:
                  command:
                  - sh
                  - -c
                  - ss -nlt | grep "LISTEN.*:4222" && ss -nlt | grep "LISTEN.*:4223"
    provides:
      nats:
        as: nats
        shared: true
    release: nats
  name: nats
  networks:
  - name: default
  stemcell: default
  vm_type: minimal
- instances: 1
  jobs:
  - name: adapter
    properties:
      quarks:
        ports:
        - internal: 4443
          name: adapter
          protocol: TCP
        run:
          healthcheck:
            adapter:
              readiness:
                exec:
                  command:
                  - curl
                  - --fail
                  - --head
                  - http://127.0.0.1:8080/health
      scalablesyslog:
        adapter:
          bosh_dns: false
          logs:
            addr: ((deployment_name))-log-api:8082
          tls:
            ca: ((loggregator_ca.certificate))
            cert: ((adapter_tls.certificate))
            cn: ss-adapter
            key: ((adapter_tls.private_key))
        adapter_rlp:
          tls:
            ca: ((loggregator_ca.certificate))
            cert: ((adapter_rlp_tls.certificate))
            cn: reverselogproxy
            key: ((adapter_rlp_tls.private_key))
    release: cf-syslog-drain
  name: adapter
  networks:
  - name: default
  stemcell: default
  vm_type: minimal
- instances: 1
  jobs:
  - name: mysql
    properties:
      cf_mysql:
        mysql:
          admin_password: ((cf_mysql_mysql_admin_password))
          binlog_enabled: false
          cluster_health:
            password: ((cf_mysql_mysql_cluster_health_password))
          enable_galera: false
          galera_healthcheck:
            db_password: ((cf_mysql_mysql_galera_healthcheck_password))
            endpoint_password: ((cf_mysql_mysql_galera_healthcheck_endpoint_password))
            endpoint_username: galera_healthcheck
          port: 3306
          seeded_databases:
          - name: cloud_controller
            password: ((cc_database_password))
            username: cloud_controller
          - name: credhub
            password: ((credhub_database_password))
            username: credhub
          - name: diego
            password: ((diego_database_password))
            username: diego
          - name: network_connectivity
            password: ((network_connectivity_database_password))
            username: network_connectivity
          - name: network_policy
            password: ((network_policy_database_password))
            username: network_policy
          - name: routing-api
            password: ((routing_api_database_password))
            username: routing-api
          - name: uaa
            password: ((uaa_database_password))
            username: uaa
          - name: locket
            password: ((locket_database_password))
            username: locket
          tls:
            ca_certificate: ((pxc_server_ca.certificate))
            server_certificate: ((mysql_server_certificate.certificate))
            server_key: ((mysql_server_certificate.private_key))
      quarks:
        bpm:
          processes:
          - args:
            - -c
            - |
              wait_for_file() {
                local file_path="$1"
                local timeout="${2:-30}"
                until [[ -f "${file_path}" ]] || [[ "$timeout" == "0" ]]; do sleep 1; timeout=$(expr $timeout - 1); done
                if [[ "${timeout}" == 0 ]]; then return 1; fi
                return 0
              }

              /var/vcap/jobs/mysql/bin/mariadb_ctl start

              pid_file="/var/vcap/sys/run/mysql/mysql.pid"
              log_file="/var/vcap/sys/log/mysql/mariadb_ctrl.combined.log"

              wait_for_file "${pid_file}" || {
                echo "${pid_file} did not get created"
                exit 1
              }

              wait_for_file "${log_file}" || {
                echo "${log_file} did not get created"
                exit 1
              }

              tail \
                --pid $(cat "${pid_file}") \
                --follow "${log_file}"
            executable: /bin/bash
            limits:
              open_files: 1048576
            name: mariadb_ctrl
            persistent_disk: true
        ports:
        - internal: 3306
          name: mysql
          protocol: TCP
        pre_render_scripts:
          jobs:
          - |
            #!/usr/bin/env bash

            set -o errexit -o nounset

            target="/var/vcap/all-releases/jobs-src/cf-mysql/mysql/templates/pre-start-setup.erb"

            # Patch pre-start-setup.erb to play nice with BPM's persistent disk. Instead of checking for the
            # existence of the directory /var/vcap/store/mysql, it checks for the existence of the file
            # /var/vcap/store/mysql/setup_succeeded, which is also created in a command from this patch.
            patch --verbose "${target}" <<'EOT'
            82,84c82,84
            < if ! test -d ${datadir}; then
            <   log "pre-start setup script: making ${datadir} and running /var/vcap/packages/mariadb/scripts/mysql_install_db"
            <   mkdir -p ${datadir}
            ---
            > setup_control_file="${datadir}/setup_succeeded"
            > if ! test -e "${setup_control_file}"; then
            >   log "pre-start setup script: running /var/vcap/packages/mariadb/scripts/mysql_install_db"
            89a90
            >   touch "${setup_control_file}"
            EOT
        run:
          healthcheck:
            mariadb_ctrl:
              readiness:
                exec:
                  command:
                  - /var/vcap/packages/mariadb/bin/mysqladmin
                  - --defaults-file=/var/vcap/jobs/mysql/config/mylogin.cnf
                  - ping
    release: cf-mysql
  migrated_from:
  - name: mysql
  - name: singleton-database
  name: database
  networks:
  - name: default
  persistent_disk: 20480
  stemcell: default
  update:
    serial: true
  vm_type: small
- instances: 1
  jobs:
  - name: cfdot
    properties:
      bbs:
        hostname: 127.0.0.1
      locket:
        hostname: 127.0.0.1
      quarks:
        bpm:
          processes: []
      tls:
        ca_certificate: ((service_cf_internal_ca.certificate))
        certificate: ((diego_rep_client.certificate))
        private_key: ((diego_rep_client.private_key))
    release: diego
  - name: bbs
    properties:
      bpm:
        enabled: true
      diego:
        bbs:
          active_key_label: key-2016-06
          advertisement_base_hostname: ((deployment_name))-diego-api
          auctioneer:
            api_location: ((deployment_name))-scheduler:9016
            ca_cert: ((service_cf_internal_ca.certificate))
            client_cert: ((diego_auctioneer_client.certificate))
            client_key: ((diego_auctioneer_client.private_key))
          ca_cert: ((service_cf_internal_ca.certificate))
          detect_consul_cell_registrations: false
          encryption_keys:
          - label: key-2016-06
            passphrase: ((diego_bbs_encryption_keys_passphrase))
          locket:
            api_location: 127.0.0.1:8891
          rep:
            ca_cert: ((service_cf_internal_ca.certificate))
            client_cert: ((diego_rep_client.certificate))
            client_key: ((diego_rep_client.private_key))
            require_tls: true
          server_cert: ((diego_bbs_server.certificate))
          server_key: ((diego_bbs_server.private_key))
          skip_consul_lock: true
          sql:
            ca_cert: ((pxc_server_ca.certificate))
            db_driver: mysql
            db_host: ((deployment_name))-database
            db_password: ((diego_database_password))
            db_port: 3306
            db_schema: diego
            db_username: diego
            require_ssl: true
      enable_consul_service_registration: false
      logging:
        format:
          timestamp: rfc3339
      loggregator:
        ca_cert: ((loggregator_ca.certificate))
        cert: ((loggregator_tls_agent.certificate))
        key: ((loggregator_tls_agent.private_key))
        use_v2_api: true
      quarks:
        ports:
        - internal: 8889
          name: cell-bbs-api
          protocol: TCP
        post_start:
          condition:
            exec:
              command:
              - sh
              - -c
              - ss -nlt | grep "LISTEN.*:8889"
        pre_render_scripts:
          jobs:
          - |
            #!/usr/bin/env bash

            set -o errexit -o nounset

            target="/var/vcap/all-releases/jobs-src/diego/bbs/templates/bbs.json.erb"

            # Advertise our spec address.
            patch --verbose "${target}" <<'EOT'
            62c62
            <     "#{scheme}://#{name.gsub('_', '-')}-#{spec.index}.#{base}:#{port}"
            ---
            >     "#{scheme}://#{spec.address}:#{port}"
            EOT
        run:
          healthcheck:
            bbs:
              readiness:
                exec:
                  command:
                  - sh
                  - -c
                  - ss -nlt | grep "LISTEN.*:8889"
      set_kernel_parameters: false
    release: diego
  - name: locket
    properties:
      bpm:
        enabled: true
      diego:
        locket:
          sql:
            ca_cert: ((pxc_server_ca.certificate))
            db_driver: mysql
            db_host: ((deployment_name))-database
            db_password: ((locket_database_password))
            db_port: 3306
            db_schema: locket
            db_username: locket
            require_ssl: true
      enable_consul_service_registration: false
      logging:
        format:
          timestamp: rfc3339
      loggregator:
        ca_cert: ((loggregator_ca.certificate))
        cert: ((loggregator_tls_agent.certificate))
        key: ((loggregator_tls_agent.private_key))
        use_v2_api: true
      quarks:
        ports:
        - internal: 8891
          name: locket
          protocol: TCP
      set_kernel_parameters: false
      tls:
        ca_cert: ((service_cf_internal_ca.certificate))
        cert: ((diego_locket_server.certificate))
        key: ((diego_locket_server.private_key))
    release: diego
  migrated_from:
  - name: diego-bbs
  name: diego-api
  networks:
  - name: default
  stemcell: default
  update:
    serial: true
  vm_type: small
- instances: 1
  jobs:
  - name: uaa
    properties:
      bpm:
        enabled: true
      encryption:
        active_key_label: default_key
        encryption_keys:
        - label: default_key
          passphrase: ((uaa_default_encryption_passphrase))
      login:
        saml:
          activeKeyId: key-1
          keys:
            key-1:
              certificate: ((uaa_login_saml.certificate))
              key: ((uaa_login_saml.private_key))
              passphrase: ""
      quarks:
        ports:
        - internal: 8080
          name: http
          protocol: TCP
        - internal: 8443
          name: https
          protocol: TCP
        post_start:
          condition:
            exec:
              command:
              - sh
              - -c
              - /var/vcap/jobs/uaa/bin/health_check
        pre_render_scripts:
          jobs:
          - |
            #!/usr/bin/env bash

            set -o errexit -o nounset

            target="/var/vcap/all-releases/jobs-src/uaa/uaa/templates/bin/pre-start.erb"

            # Patch bin/pre-start.erb for the certificates to work with SUSE.
            patch --verbose "${target}" <<'EOT'
            24c24
            < rm -f /usr/local/share/ca-certificates/uaa_*
            ---
            > rm -f /etc/pki/trust/anchors/uaa_*
            26,27c26,27
            <     echo "Adding certificate from manifest to OS certs /usr/local/share/ca-certificates/uaa_<%= i %>.crt"
            <     echo -n '<%= cert %>' >> "/usr/local/share/ca-certificates/uaa_<%= i %>.crt"
            ---
            >     echo "Adding certificate from manifest to OS certs /etc/pki/trust/anchors/uaa_<%= i %>.crt"
            >     echo -n '<%= cert %>' >> "/etc/pki/trust/anchors/uaa_<%= i %>.crt"
            EOT
          - |
            #!/usr/bin/env bash

            set -o errexit -o nounset

            target="/var/vcap/all-releases/jobs-src/uaa/uaa/templates/bin/uaa.erb"

            # Patch bin/uaa.erb for the certificates to work with SUSE.
            patch --verbose "${target}" <<'EOT'
            49c49
            < cp /etc/ssl/certs/ca-certificates.crt "$CERT_FILE"
            ---
            > cp /var/lib/ca-certificates/ca-bundle.pem "$CERT_FILE"
            EOT
        run:
          healthcheck:
            uaa:
              readiness:
                exec:
                  command:
                  - sh
                  - -c
                  - /var/vcap/jobs/uaa/bin/health_check
      uaa:
        admin:
          client_secret: ((uaa_admin_client_secret))
        ca_certs:
        - ((pxc_server_ca.certificate))
        clients:
          cc-service-dashboards:
            authorities: clients.read,clients.write,clients.admin
            authorized-grant-types: client_credentials
            scope: openid,cloud_controller_service_permissions.read
            secret: ((uaa_clients_cc-service-dashboards_secret))
          cc_routing:
            authorities: routing.router_groups.read
            authorized-grant-types: client_credentials
            secret: ((uaa_clients_cc-routing_secret))
          cc_service_key_client:
            authorities: credhub.read,credhub.write
            authorized-grant-types: client_credentials
            secret: ((uaa_clients_cc_service_key_client_secret))
          cf:
            access-token-validity: 600
            authorities: uaa.none
            authorized-grant-types: password,refresh_token
            override: true
            refresh-token-validity: 2592000
            scope: network.admin,network.write,cloud_controller.read,cloud_controller.write,openid,password.write,cloud_controller.admin,scim.read,scim.write,doppler.firehose,uaa.user,routing.router_groups.read,routing.router_groups.write,cloud_controller.admin_read_only,cloud_controller.global_auditor,perm.admin,clients.read
            secret: ""
          cf_smoke_tests:
            authorities: cloud_controller.admin
            authorized-grant-types: client_credentials
            secret: ((uaa_clients_cf_smoke_tests_secret))
          cloud_controller_username_lookup:
            authorities: scim.userids
            authorized-grant-types: client_credentials
            secret: ((uaa_clients_cloud_controller_username_lookup_secret))
          credhub_admin_client:
            authorities: credhub.read,credhub.write
            authorized-grant-types: client_credentials
            secret: ((credhub_admin_client_secret))
          doppler:
            authorities: uaa.resource
            authorized-grant-types: client_credentials
            override: true
            secret: ((uaa_clients_doppler_secret))
          gorouter:
            authorities: routing.routes.read
            authorized-grant-types: client_credentials
            secret: ((uaa_clients_gorouter_secret))
          network-policy:
            authorities: uaa.resource,cloud_controller.admin_read_only
            authorized-grant-types: client_credentials
            secret: ((uaa_clients_network_policy_secret))
          routing_api_client:
            authorities: routing.routes.write,routing.routes.read,routing.router_groups.read
            authorized-grant-types: client_credentials
            secret: ((uaa_clients_routing_api_client_secret))
          ssh-proxy:
            authorized-grant-types: authorization_code
            autoapprove: true
            override: true
            redirect-uri: https://uaa.((system_domain))/login
            scope: openid,cloud_controller.read,cloud_controller.write,cloud_controller.admin
            secret: ((uaa_clients_ssh-proxy_secret))
          tcp_emitter:
            authorities: routing.routes.write,routing.routes.read
            authorized-grant-types: client_credentials
            secret: ((uaa_clients_tcp_emitter_secret))
          tcp_router:
            authorities: routing.routes.read
            authorized-grant-types: client_credentials
            secret: ((uaa_clients_tcp_router_secret))
        jwt:
          policy:
            active_key_id: key-1
            keys:
              key-1:
                signingKey: ((uaa_jwt_signing_key.private_key))
        logging_level: INFO
        scim:
          users:
          - groups:
            - clients.read
            - cloud_controller.admin
            - doppler.firehose
            - network.admin
            - openid
            - routing.router_groups.read
            - routing.router_groups.write
            - scim.read
            - scim.write
            name: admin
            password: ((cf_admin_password))
        sslCertificate: ((uaa_ssl.certificate))
        sslPrivateKey: ((uaa_ssl.private_key))
        url: https://uaa.((system_domain))
        zones:
          internal:
            hostnames:
            - ((deployment_name))-uaa
      uaadb:
        address: ((deployment_name))-database
        databases:
        - name: uaa
          tag: uaa
        db_scheme: mysql
        port: 3306
        roles:
        - name: uaa
          password: ((uaa_database_password))
          tag: admin
        tls_enabled: true
    release: uaa
  - name: route_registrar
    properties:
      nats:
        machines:
        - ((deployment_name))-nats
      route_registrar:
        routes:
        - health_check:
            name: uaa-healthcheck
            script_path: /var/vcap/jobs/uaa/bin/health_check
          name: uaa
          port: 8080
          registration_interval: 10s
          tags:
            component: uaa
          uris:
          - uaa.((system_domain))
          - '*.uaa.((system_domain))'
          - login.((system_domain))
          - '*.login.((system_domain))'
        routing_api:
          api_url: http://((deployment_name))-api:3000
          oauth_url: https://((deployment_name))-uaa:8443
    release: routing
  - name: statsd_injector
    properties:
      loggregator:
        tls:
          ca_cert: ((loggregator_ca.certificate))
          statsd_injector:
            cert: ((loggregator_tls_statsdinjector.certificate))
            key: ((loggregator_tls_statsdinjector.private_key))
    release: statsd-injector
  name: uaa
  networks:
  - name: default
  stemcell: default
  vm_type: minimal
- instances: 1
  jobs:
  - name: blobstore
    properties:
      blobstore:
        admin_users:
        - password: ((blobstore_admin_users_password))
          username: blobstore-user
        secure_link:
          secret: ((blobstore_secure_link_secret))
        tls:
          cert: ((blobstore_tls.certificate))
          private_key: ((blobstore_tls.private_key))
      internal_server_name: ((deployment_name))-singleton-blobstore
      quarks:
        ports:
        - internal: 8080
          name: http
          protocol: TCP
        - internal: 4443
          name: https
          protocol: TCP
        pre_render_scripts:
          ig_resolver:
          - |
            #!/usr/bin/env bash

            set -o errexit -o nounset

            # Add internal_server_name property so it can be injected.

            target="/var/vcap/all-releases/jobs-src/capi/blobstore/job.MF"

            patch --binary --unified --verbose "${target}" <<'EOT'
            @@ -95,2 +95,5 @@
                domain:
                  description: "DEPRECATED: The system domain.  The public server will listen on host 'blobstore.system-domain.tld'"
            +
            +  internal_server_name:
            +    description: "The internal server_name"
            EOT
          jobs:
          - |
            #!/usr/bin/env bash

            set -o errexit -o nounset

            # Fix the hardcoded server_name.

            target="/var/vcap/all-releases/jobs-src/capi/blobstore/templates/blobstore.conf.erb"

            patch --binary --unified --verbose "${target}" <<'EOT'
            @@ -13,7 +13,7 @@
              # Internal server
              server {
                listen      <%= p('blobstore.tls.port') %> ssl;
            -  server_name blobstore.service.cf.internal;
            +  server_name <%= p("internal_server_name") %>;
                ssl_certificate     /var/vcap/jobs/blobstore/ssl/blobstore.crt;
                ssl_certificate_key /var/vcap/jobs/blobstore/ssl/blobstore.key;
            EOT
          - |
            #!/usr/bin/env bash

            set -o errexit -o nounset

            # Remove /var/vcap/packages from chowing.

            target="/var/vcap/all-releases/jobs-src/capi/blobstore/templates/pre-start.sh.erb"

            patch --binary --unified --verbose "${target}" <<'EOT'
            @@ -9,7 +9,6 @@
                local data_dir=/var/vcap/data/blobstore
                local store_tmp_dir=$store_dir/tmp/uploads
                local data_tmp_dir=$data_dir/tmp/uploads
            -  local nginx_webdav_dir=/var/vcap/packages/nginx_webdav

                mkdir -p $run_dir
                mkdir -p $log_dir
            @@ -19,7 +18,7 @@
                mkdir -p $data_tmp_dir

                chown vcap:vcap $store_dir
            -  local dirs="$run_dir $log_dir $store_tmp_dir $data_dir $data_tmp_dir $nginx_webdav_dir ${nginx_webdav_dir}/.."
            +  local dirs="$run_dir $log_dir $store_tmp_dir $data_dir $data_tmp_dir"
                local num_needing_chown=$(find $dirs -not -user vcap -or -not -group vcap | wc -l)

                if [ $num_needing_chown -gt 0 ]; then
            EOT
        run:
          healthcheck:
            nginx:
              readiness:
                exec:
                  command:
                  - sh
                  - -c
                  - ss -nlt | grep "LISTEN.*:8080" && ss -nlt | grep "LISTEN.*:4443"
            url_signer:
              readiness:
                exec:
                  command:
                  - sh
                  - -c
                  - ss -nlt | grep "LISTEN.*:8080" && ss -nlt | grep "LISTEN.*:4443"
          security_context:
            runAsUser: 1000
      system_domain: ((system_domain))
    release: capi
  - name: route_registrar
    properties:
      nats:
        machines:
        - ((deployment_name))-nats
      route_registrar:
        routes:
        - name: blobstore
          port: 8080
          registration_interval: 20s
          tags:
            component: blobstore
          uris:
          - blobstore.((system_domain))
        routing_api:
          api_url: http://((deployment_name))-api:3000
          oauth_url: https://((deployment_name))-uaa:8443
    release: routing
  migrated_from:
  - name: blobstore
  name: singleton-blobstore
  networks:
  - name: default
  persistent_disk: 102400
  stemcell: default
  update:
    serial: true
  vm_type: small
- instances: 1
  jobs:
  - name: cloud_controller_ng
    properties:
      app_domains:
      - ((system_domain))
      app_ssh:
        host_key_fingerprint: ((diego_ssh_proxy_host_key.public_key_fingerprint))
      cc:
        buildpacks:
          blobstore_type: webdav
          webdav_config:
            blobstore_timeout: 5
            ca_cert: ((service_cf_internal_ca.certificate))
            password: ((blobstore_admin_users_password))
            private_endpoint: https://((deployment_name))-singleton-blobstore:4443
            public_endpoint: https://blobstore.((system_domain))
            username: blobstore-user
        bulk_api_password: ((cc_bulk_api_password))
        core_file_pattern: false
        database_encryption:
          current_key_label: encryption_key_0
          keys:
            encryption_key_0: ((cc_db_encryption_key))
          skip_validation: true
        db_encryption_key: ((cc_db_encryption_key))
        default_running_security_groups:
        - public_networks
        - dns
        default_staging_security_groups:
        - public_networks
        - dns
        diego:
          bbs:
            url: https://((deployment_name))-diego-api:8889
          docker_staging_stack: cflinuxfs3
          file_server_url: http://((deployment_name))-api:8080
        droplets:
          blobstore_type: webdav
          webdav_config:
            blobstore_timeout: 5
            ca_cert: ((service_cf_internal_ca.certificate))
            password: ((blobstore_admin_users_password))
            private_endpoint: https://((deployment_name))-singleton-blobstore:4443
            public_endpoint: https://blobstore.((system_domain))
            username: blobstore-user
        install_buildpacks:
        - file: /var/vcap/data/shared-packages/staticfile-buildpack/packages/staticfile-buildpack-cflinuxfs3/staticfile_buildpack-cflinuxfs3-v1.4.40.zip
          name: staticfile_buildpack
        - file: /var/vcap/data/shared-packages/java-buildpack/packages/java-buildpack-cflinuxfs3/java-buildpack-cflinuxfs3-v4.18.zip
          name: java_buildpack
        - file: /var/vcap/data/shared-packages/ruby-buildpack/packages/ruby-buildpack-cflinuxfs3/ruby_buildpack-cflinuxfs3-v1.7.36.zip
          name: ruby_buildpack
        - file: /var/vcap/data/shared-packages/dotnet-core-buildpack/packages/dotnet-core-buildpack-cflinuxfs3/dotnet-core_buildpack-cflinuxfs3-v2.2.7.zip
          name: dotnet_core_buildpack
        - file: /var/vcap/data/shared-packages/nodejs-buildpack/packages/nodejs-buildpack-cflinuxfs3/nodejs_buildpack-cflinuxfs3-v1.6.45.zip
          name: nodejs_buildpack
        - file: /var/vcap/data/shared-packages/go-buildpack/packages/go-buildpack-cflinuxfs3/go_buildpack-cflinuxfs3-v1.8.35.zip
          name: go_buildpack
        - file: /var/vcap/data/shared-packages/python-buildpack/packages/python-buildpack-cflinuxfs3/python_buildpack-cflinuxfs3-v1.6.29.zip
          name: python_buildpack
        - file: /var/vcap/data/shared-packages/php-buildpack/packages/php-buildpack-cflinuxfs3/php_buildpack-cflinuxfs3-v4.3.72.zip
          name: php_buildpack
        - file: /var/vcap/data/shared-packages/nginx-buildpack/packages/nginx-buildpack-cflinuxfs3/nginx_buildpack-cflinuxfs3-v1.0.9.zip
          name: nginx_buildpack
        - file: /var/vcap/data/shared-packages/r-buildpack/packages/r-buildpack-cflinuxfs3/r_buildpack-cflinuxfs3-v1.0.7.zip
          name: r_buildpack
        - file: /var/vcap/data/shared-packages/binary-buildpack/packages/binary-buildpack-cflinuxfs3/binary_buildpack-cflinuxfs3-v1.0.31.zip
          name: binary_buildpack
        internal_api_password: ((cc_internal_api_password))
        internal_service_hostname: ((deployment_name))-api
        logcache:
          host: ((deployment_name))-doppler
        logcache_tls:
          certificate: ((cc_logcache_tls.certificate))
          private_key: ((cc_logcache_tls.private_key))
        loggregator:
          internal_url: https://((deployment_name))-log-api:8081
        mutual_tls:
          ca_cert: ((service_cf_internal_ca.certificate))
          private_key: ((cc_tls.private_key))
          public_cert: ((cc_tls.certificate))
        packages:
          blobstore_type: webdav
          webdav_config:
            blobstore_timeout: 5
            ca_cert: ((service_cf_internal_ca.certificate))
            password: ((blobstore_admin_users_password))
            private_endpoint: https://((deployment_name))-singleton-blobstore:4443
            public_endpoint: https://blobstore.((system_domain))
            username: blobstore-user
        public_tls:
          ca_cert: ((service_cf_internal_ca.certificate))
          certificate: ((cc_public_tls.certificate))
          private_key: ((cc_public_tls.private_key))
        resource_pool:
          blobstore_type: webdav
          webdav_config:
            blobstore_timeout: 5
            ca_cert: ((service_cf_internal_ca.certificate))
            password: ((blobstore_admin_users_password))
            private_endpoint: https://((deployment_name))-singleton-blobstore:4443
            public_endpoint: https://blobstore.((system_domain))
            username: blobstore-user
        run_prestart_migrations: false
        security_group_definitions:
        - name: public_networks
          rules:
          - destination: 0.0.0.0-9.255.255.255
            protocol: all
          - destination: 11.0.0.0-169.253.255.255
            protocol: all
          - destination: 169.255.0.0-172.15.255.255
            protocol: all
          - destination: 172.32.0.0-192.167.255.255
            protocol: all
          - destination: 192.169.0.0-255.255.255.255
            protocol: all
        - name: dns
          rules:
          - destination: 0.0.0.0/0
            ports: "53"
            protocol: tcp
          - destination: 0.0.0.0/0
            ports: "53"
            protocol: udp
        stacks:
        - description: Cloud Foundry Linux-based filesystem (Ubuntu 18.04)
          name: cflinuxfs3
        staging_upload_password: ((cc_staging_upload_password))
        staging_upload_user: staging_user
        temporary_use_logcache: true
        uaa:
          internal_url: ((deployment_name))-uaa
      ccdb:
        address: ((deployment_name))-database
        ca_cert: ((pxc_server_ca.certificate))
        databases:
        - name: cloud_controller
          tag: cc
        db_scheme: mysql
        port: 3306
        roles:
        - name: cloud_controller
          password: ((cc_database_password))
          tag: admin
      credhub_api:
        ca_cert: ((credhub_ca.certificate))
        hostname: ((deployment_name))-credhub
      quarks:
        ports:
        - internal: 9022
          name: api
          protocol: TCP
        - internal: 9023
          name: api-tls
          protocol: TCP
        - internal: 9024
          name: api-mutual-tls
          protocol: TCP
        post_start:
          condition:
            exec:
              command:
              - curl
              - --fail
              - --head
              - --silent
              - http://127.0.0.1:9022/healthz
        pre_render_scripts:
          bpm:
          - |
            #!/usr/bin/env bash

            set -o errexit -o nounset

            target="/var/vcap/all-releases/jobs-src/capi/cloud_controller_ng/templates/bpm.yml.erb"

            # Patch a few things on the BPM:
            #   - DYNO environment variable is not needed.
            #   - We don't enable New Relic.
            #   - NGINX maintenance shouldn't run.
            patch --verbose "${target}" <<'EOT'
            23d22
            <     "DYNO" => "#{spec.job.name}-#{spec.index}",
            77,78d75
            <     nginx_newrelic_plugin_config,
            <     nginx_maintenance_config,
            EOT
          jobs:
          - |
            #!/usr/bin/env bash

            set -o errexit -o nounset

            target="/var/vcap/all-releases/jobs-src/capi/cloud_controller_ng/templates/post-start.sh.erb"

            # chown the cc log so that the vcap user can write to it from the post-start script.
            patch --verbose "${target}" <<'EOT'
            @@ -61,6 +61,7 @@
              }

              function main {
            +  chown vcap:vcap "/var/vcap/sys/log/cloud_controller_ng/cloud_controller_ng.log"
                install_buildpacks
                fix_bundler_home_permissions
              }
            EOT
          - |
            #!/usr/bin/env bash

            set -o errexit -o nounset

            target="/var/vcap/all-releases/jobs-src/capi/cloud_controller_ng/templates/pre-start.sh.erb"

            # TODO: Figure out why tee_output_to_sys_log fails the pre-start.
            patch --verbose "${target}" <<'EOT'
            7d6
            < tee_output_to_sys_log "cloud_controller_ng.$(basename "$0")"
            EOT
        run:
          healthcheck:
            cloud_controller_ng:
              readiness:
                exec:
                  command:
                  - curl
                  - --fail
                  - --head
                  - --silent
                  - http://127.0.0.1:9022/healthz
      router:
        route_services_secret: ((router_route_services_secret))
      routing_api:
        enabled: true
      ssl:
        skip_cert_verify: true
      system_domain: ((system_domain))
      uaa:
        ca_cert: ((uaa_ca.certificate))
        clients:
          cc-service-dashboards:
            secret: ((uaa_clients_cc-service-dashboards_secret))
          cc_routing:
            secret: ((uaa_clients_cc-routing_secret))
          cc_service_key_client:
            secret: ((uaa_clients_cc_service_key_client_secret))
          cloud_controller_username_lookup:
            secret: ((uaa_clients_cloud_controller_username_lookup_secret))
        url: https://uaa.((system_domain))
    provides:
      cloud_controller:
        as: cloud_controller
        shared: true
    release: capi
  - name: binary-buildpack
    properties:
      quarks:
        bpm:
          processes: []
        pre_render_scripts:
          ig_resolver:
          - |
            #!/usr/bin/env bash

            # Add bin/pre-start to the buildpack job templates.

            set -o errexit -o nounset

            release="binary-buildpack"
            job="binary-buildpack"

            job_mf="/var/vcap/all-releases/jobs-src/${release}/${job}/job.MF"

            sed -i 's|templates: {}||' "${job_mf}"
            cat <<EOT > "${job_mf}"
            templates:
              bin/pre-start: bin/pre-start
            EOT
          jobs:
          - |
            #!/usr/bin/env bash

            # Create the pre-start script that copies the buildpack package to /var/vcap/data/shared-packages/.

            set -o errexit -o nounset

            release="binary-buildpack"
            buildpack="binary-buildpack"

            pre_start="/var/vcap/all-releases/jobs-src/${release}/${buildpack}/templates/bin/pre-start"
            copy_dst="/var/vcap/data/shared-packages/${buildpack}/"
            mkdir -p "$(dirname "${pre_start}")"
            cat <<EOT > "${pre_start}"
            #!/usr/bin/env bash
            set -o errexit
            mkdir -p "${copy_dst}"
            cp -r /var/vcap/packages "${copy_dst}"
            EOT
    release: binary-buildpack
  - name: dotnet-core-buildpack
    properties:
      quarks:
        bpm:
          processes: []
        pre_render_scripts:
          ig_resolver:
          - |
            #!/usr/bin/env bash

            # Add bin/pre-start to the buildpack job templates.

            set -o errexit -o nounset

            release="dotnet-core-buildpack"
            job="dotnet-core-buildpack"

            job_mf="/var/vcap/all-releases/jobs-src/${release}/${job}/job.MF"

            sed -i 's|templates: {}||' "${job_mf}"
            cat <<EOT > "${job_mf}"
            templates:
              bin/pre-start: bin/pre-start
            EOT
          jobs:
          - |
            #!/usr/bin/env bash

            # Create the pre-start script that copies the buildpack package to /var/vcap/data/shared-packages/.

            set -o errexit -o nounset

            release="dotnet-core-buildpack"
            buildpack="dotnet-core-buildpack"

            pre_start="/var/vcap/all-releases/jobs-src/${release}/${buildpack}/templates/bin/pre-start"
            copy_dst="/var/vcap/data/shared-packages/${buildpack}/"
            mkdir -p "$(dirname "${pre_start}")"
            cat <<EOT > "${pre_start}"
            #!/usr/bin/env bash
            set -o errexit
            mkdir -p "${copy_dst}"
            cp -r /var/vcap/packages "${copy_dst}"
            EOT
    release: dotnet-core-buildpack
  - name: go-buildpack
    properties:
      quarks:
        bpm:
          processes: []
        pre_render_scripts:
          ig_resolver:
          - |
            #!/usr/bin/env bash

            # Add bin/pre-start to the buildpack job templates.

            set -o errexit -o nounset

            release="go-buildpack"
            job="go-buildpack"

            job_mf="/var/vcap/all-releases/jobs-src/${release}/${job}/job.MF"

            sed -i 's|templates: {}||' "${job_mf}"
            cat <<EOT > "${job_mf}"
            templates:
              bin/pre-start: bin/pre-start
            EOT
          jobs:
          - |
            #!/usr/bin/env bash

            # Create the pre-start script that copies the buildpack package to /var/vcap/data/shared-packages/.

            set -o errexit -o nounset

            release="go-buildpack"
            buildpack="go-buildpack"

            pre_start="/var/vcap/all-releases/jobs-src/${release}/${buildpack}/templates/bin/pre-start"
            copy_dst="/var/vcap/data/shared-packages/${buildpack}/"
            mkdir -p "$(dirname "${pre_start}")"
            cat <<EOT > "${pre_start}"
            #!/usr/bin/env bash
            set -o errexit
            mkdir -p "${copy_dst}"
            cp -r /var/vcap/packages "${copy_dst}"
            EOT
    release: go-buildpack
  - name: java-buildpack
    properties:
      quarks:
        bpm:
          processes: []
        pre_render_scripts:
          ig_resolver:
          - |
            #!/usr/bin/env bash

            # Add bin/pre-start to the buildpack job templates.

            set -o errexit -o nounset

            release="java-buildpack"
            job="java-buildpack"

            job_mf="/var/vcap/all-releases/jobs-src/${release}/${job}/job.MF"

            sed -i 's|templates: {}||' "${job_mf}"
            cat <<EOT > "${job_mf}"
            templates:
              bin/pre-start: bin/pre-start
            EOT
          jobs:
          - |
            #!/usr/bin/env bash

            # Create the pre-start script that copies the buildpack package to /var/vcap/data/shared-packages/.

            set -o errexit -o nounset

            release="java-buildpack"
            buildpack="java-buildpack"

            pre_start="/var/vcap/all-releases/jobs-src/${release}/${buildpack}/templates/bin/pre-start"
            copy_dst="/var/vcap/data/shared-packages/${buildpack}/"
            mkdir -p "$(dirname "${pre_start}")"
            cat <<EOT > "${pre_start}"
            #!/usr/bin/env bash
            set -o errexit
            mkdir -p "${copy_dst}"
            cp -r /var/vcap/packages "${copy_dst}"
            EOT
    release: java-buildpack
  - name: nodejs-buildpack
    properties:
      quarks:
        bpm:
          processes: []
        pre_render_scripts:
          ig_resolver:
          - |
            #!/usr/bin/env bash

            # Add bin/pre-start to the buildpack job templates.

            set -o errexit -o nounset

            release="nodejs-buildpack"
            job="nodejs-buildpack"

            job_mf="/var/vcap/all-releases/jobs-src/${release}/${job}/job.MF"

            sed -i 's|templates: {}||' "${job_mf}"
            cat <<EOT > "${job_mf}"
            templates:
              bin/pre-start: bin/pre-start
            EOT
          jobs:
          - |
            #!/usr/bin/env bash

            # Create the pre-start script that copies the buildpack package to /var/vcap/data/shared-packages/.

            set -o errexit -o nounset

            release="nodejs-buildpack"
            buildpack="nodejs-buildpack"

            pre_start="/var/vcap/all-releases/jobs-src/${release}/${buildpack}/templates/bin/pre-start"
            copy_dst="/var/vcap/data/shared-packages/${buildpack}/"
            mkdir -p "$(dirname "${pre_start}")"
            cat <<EOT > "${pre_start}"
            #!/usr/bin/env bash
            set -o errexit
            mkdir -p "${copy_dst}"
            cp -r /var/vcap/packages "${copy_dst}"
            EOT
    release: nodejs-buildpack
  - name: nginx-buildpack
    properties:
      quarks:
        bpm:
          processes: []
        pre_render_scripts:
          ig_resolver:
          - |
            #!/usr/bin/env bash

            # Add bin/pre-start to the buildpack job templates.

            set -o errexit -o nounset

            release="nginx-buildpack"
            job="nginx-buildpack"

            job_mf="/var/vcap/all-releases/jobs-src/${release}/${job}/job.MF"

            sed -i 's|templates: {}||' "${job_mf}"
            cat <<EOT > "${job_mf}"
            templates:
              bin/pre-start: bin/pre-start
            EOT
          jobs:
          - |
            #!/usr/bin/env bash

            # Create the pre-start script that copies the buildpack package to /var/vcap/data/shared-packages/.

            set -o errexit -o nounset

            release="nginx-buildpack"
            buildpack="nginx-buildpack"

            pre_start="/var/vcap/all-releases/jobs-src/${release}/${buildpack}/templates/bin/pre-start"
            copy_dst="/var/vcap/data/shared-packages/${buildpack}/"
            mkdir -p "$(dirname "${pre_start}")"
            cat <<EOT > "${pre_start}"
            #!/usr/bin/env bash
            set -o errexit
            mkdir -p "${copy_dst}"
            cp -r /var/vcap/packages "${copy_dst}"
            EOT
    release: nginx-buildpack
  - name: r-buildpack
    properties:
      quarks:
        bpm:
          processes: []
        pre_render_scripts:
          ig_resolver:
          - |
            #!/usr/bin/env bash

            # Add bin/pre-start to the buildpack job templates.

            set -o errexit -o nounset

            release="r-buildpack"
            job="r-buildpack"

            job_mf="/var/vcap/all-releases/jobs-src/${release}/${job}/job.MF"

            sed -i 's|templates: {}||' "${job_mf}"
            cat <<EOT > "${job_mf}"
            templates:
              bin/pre-start: bin/pre-start
            EOT
          jobs:
          - |
            #!/usr/bin/env bash

            # Create the pre-start script that copies the buildpack package to /var/vcap/data/shared-packages/.

            set -o errexit -o nounset

            release="r-buildpack"
            buildpack="r-buildpack"

            pre_start="/var/vcap/all-releases/jobs-src/${release}/${buildpack}/templates/bin/pre-start"
            copy_dst="/var/vcap/data/shared-packages/${buildpack}/"
            mkdir -p "$(dirname "${pre_start}")"
            cat <<EOT > "${pre_start}"
            #!/usr/bin/env bash
            set -o errexit
            mkdir -p "${copy_dst}"
            cp -r /var/vcap/packages "${copy_dst}"
            EOT
    release: r-buildpack
  - name: php-buildpack
    properties:
      quarks:
        bpm:
          processes: []
        pre_render_scripts:
          ig_resolver:
          - |
            #!/usr/bin/env bash

            # Add bin/pre-start to the buildpack job templates.

            set -o errexit -o nounset

            release="php-buildpack"
            job="php-buildpack"

            job_mf="/var/vcap/all-releases/jobs-src/${release}/${job}/job.MF"

            sed -i 's|templates: {}||' "${job_mf}"
            cat <<EOT > "${job_mf}"
            templates:
              bin/pre-start: bin/pre-start
            EOT
          jobs:
          - |
            #!/usr/bin/env bash

            # Create the pre-start script that copies the buildpack package to /var/vcap/data/shared-packages/.

            set -o errexit -o nounset

            release="php-buildpack"
            buildpack="php-buildpack"

            pre_start="/var/vcap/all-releases/jobs-src/${release}/${buildpack}/templates/bin/pre-start"
            copy_dst="/var/vcap/data/shared-packages/${buildpack}/"
            mkdir -p "$(dirname "${pre_start}")"
            cat <<EOT > "${pre_start}"
            #!/usr/bin/env bash
            set -o errexit
            mkdir -p "${copy_dst}"
            cp -r /var/vcap/packages "${copy_dst}"
            EOT
    release: php-buildpack
  - name: python-buildpack
    properties:
      quarks:
        bpm:
          processes: []
        pre_render_scripts:
          ig_resolver:
          - |
            #!/usr/bin/env bash

            # Add bin/pre-start to the buildpack job templates.

            set -o errexit -o nounset

            release="python-buildpack"
            job="python-buildpack"

            job_mf="/var/vcap/all-releases/jobs-src/${release}/${job}/job.MF"

            sed -i 's|templates: {}||' "${job_mf}"
            cat <<EOT > "${job_mf}"
            templates:
              bin/pre-start: bin/pre-start
            EOT
          jobs:
          - |
            #!/usr/bin/env bash

            # Create the pre-start script that copies the buildpack package to /var/vcap/data/shared-packages/.

            set -o errexit -o nounset

            release="python-buildpack"
            buildpack="python-buildpack"

            pre_start="/var/vcap/all-releases/jobs-src/${release}/${buildpack}/templates/bin/pre-start"
            copy_dst="/var/vcap/data/shared-packages/${buildpack}/"
            mkdir -p "$(dirname "${pre_start}")"
            cat <<EOT > "${pre_start}"
            #!/usr/bin/env bash
            set -o errexit
            mkdir -p "${copy_dst}"
            cp -r /var/vcap/packages "${copy_dst}"
            EOT
    release: python-buildpack
  - name: ruby-buildpack
    properties:
      quarks:
        bpm:
          processes: []
        pre_render_scripts:
          ig_resolver:
          - |
            #!/usr/bin/env bash

            # Add bin/pre-start to the buildpack job templates.

            set -o errexit -o nounset

            release="ruby-buildpack"
            job="ruby-buildpack"

            job_mf="/var/vcap/all-releases/jobs-src/${release}/${job}/job.MF"

            sed -i 's|templates: {}||' "${job_mf}"
            cat <<EOT > "${job_mf}"
            templates:
              bin/pre-start: bin/pre-start
            EOT
          jobs:
          - |
            #!/usr/bin/env bash

            # Create the pre-start script that copies the buildpack package to /var/vcap/data/shared-packages/.

            set -o errexit -o nounset

            release="ruby-buildpack"
            buildpack="ruby-buildpack"

            pre_start="/var/vcap/all-releases/jobs-src/${release}/${buildpack}/templates/bin/pre-start"
            copy_dst="/var/vcap/data/shared-packages/${buildpack}/"
            mkdir -p "$(dirname "${pre_start}")"
            cat <<EOT > "${pre_start}"
            #!/usr/bin/env bash
            set -o errexit
            mkdir -p "${copy_dst}"
            cp -r /var/vcap/packages "${copy_dst}"
            EOT
    release: ruby-buildpack
  - name: staticfile-buildpack
    properties:
      quarks:
        bpm:
          processes: []
        pre_render_scripts:
          ig_resolver:
          - |
            #!/usr/bin/env bash

            # Add bin/pre-start to the buildpack job templates.

            set -o errexit -o nounset

            release="staticfile-buildpack"
            job="staticfile-buildpack"

            job_mf="/var/vcap/all-releases/jobs-src/${release}/${job}/job.MF"

            sed -i 's|templates: {}||' "${job_mf}"
            cat <<EOT > "${job_mf}"
            templates:
              bin/pre-start: bin/pre-start
            EOT
          jobs:
          - |
            #!/usr/bin/env bash

            # Create the pre-start script that copies the buildpack package to /var/vcap/data/shared-packages/.

            set -o errexit -o nounset

            release="staticfile-buildpack"
            buildpack="staticfile-buildpack"

            pre_start="/var/vcap/all-releases/jobs-src/${release}/${buildpack}/templates/bin/pre-start"
            copy_dst="/var/vcap/data/shared-packages/${buildpack}/"
            mkdir -p "$(dirname "${pre_start}")"
            cat <<EOT > "${pre_start}"
            #!/usr/bin/env bash
            set -o errexit
            mkdir -p "${copy_dst}"
            cp -r /var/vcap/packages "${copy_dst}"
            EOT
    release: staticfile-buildpack
  - name: route_registrar
    properties:
      nats:
        machines:
        - ((deployment_name))-nats
      route_registrar:
        routes:
        - health_check:
            name: api-health-check
            script_path: /var/vcap/jobs/cloud_controller_ng/bin/cloud_controller_ng_health_check
            timeout: 6s
          name: api
          port: 9022
          registration_interval: 10s
          server_cert_domain_san: api.((system_domain))
          tags:
            component: CloudController
          tls_port: 9024
          uris:
          - api.((system_domain))
        - name: policy-server
          port: 4002
          registration_interval: 20s
          uris:
          - api.((system_domain))/networking
        routing_api:
          api_url: http://((deployment_name))-api:3000
          oauth_url: https://((deployment_name))-uaa:8443
    release: routing
  - name: statsd_injector
    properties:
      loggregator:
        tls:
          ca_cert: ((loggregator_ca.certificate))
          statsd_injector:
            cert: ((loggregator_tls_statsdinjector.certificate))
            key: ((loggregator_tls_statsdinjector.private_key))
      quarks:
        ports:
        - internal: 8125
          name: statsd
          protocol: TCP
    release: statsd-injector
  - name: file_server
    properties:
      bpm:
        enabled: true
      diego:
        file_server:
          static_directory: /var/vcap/packages/
      enable_consul_service_registration: false
      logging:
        format:
          timestamp: rfc3339
      loggregator:
        ca_cert: ((loggregator_ca.certificate))
        cert: ((loggregator_tls_agent.certificate))
        key: ((loggregator_tls_agent.private_key))
        use_v2_api: true
      quarks:
        ports:
        - internal: 8080
          name: file-server
          protocol: TCP
        run:
          healthcheck:
            file_server:
              readiness:
                tcpSocket:
                  port: 8080
      set_kernel_parameters: false
    release: diego
  - name: routing-api
    properties:
      dns_health_check_host: ((deployment_name))-uaa
      quarks:
        ports:
        - internal: 3000
          name: routing-api
          protocol: TCP
        pre_render_scripts:
          bpm:
          - |
            #!/usr/bin/env bash

            set -o errexit -o nounset

            target="/var/vcap/all-releases/jobs-src/routing/routing-api/templates/bpm.yml.erb"

            patch --binary --unified --verbose "${target}" <<'EOT'
            @@ -11,7 +11,7 @@
                  - -timeFormat
                  - rfc3339
                  - -ip
            -    - <%= spec.ip %>
            +    - 0.0.0.0
                  <% if p("routing_api.auth_disabled") == true %>- -devMode <% end %>

                  hooks:
            EOT
      routing_api:
        locket:
          api_location: ((deployment_name))-diego-api:8891
          ca_cert: ((service_cf_internal_ca.certificate))
          client_cert: ((diego_locket_client.certificate))
          client_key: ((diego_locket_client.private_key))
        router_groups:
        - name: default-tcp
          reservable_ports: 1024-1033
          type: tcp
        skip_consul_lock: true
        sqldb:
          ca_cert: ((pxc_server_ca.certificate))
          host: ((deployment_name))-database
          password: ((routing_api_database_password))
          port: 3306
          schema: routing-api
          type: mysql
          username: routing-api
        system_domain: ((system_domain))
      uaa:
        ca_cert: ((uaa_ca.certificate))
        tls_port: 8443
        token_endpoint: ((deployment_name))-uaa
    release: routing
  - name: policy-server
    properties:
      database:
        ca_cert: ((pxc_server_ca.certificate))
        host: ((deployment_name))-database
        name: network_policy
        password: ((network_policy_database_password))
        port: 3306
        require_ssl: true
        type: mysql
        username: network_policy
      enable_space_developer_self_service: true
      quarks:
        ports:
        - internal: 4002
          name: policy-server
          protocol: TCP
        post_start:
          condition:
            exec:
              command:
              - sh
              - -c
              - ss -nlt | grep "LISTEN.*:4002"
        run:
          healthcheck:
            policy-server:
              readiness:
                exec:
                  command:
                  - sh
                  - -c
                  - ss -nlt | grep "LISTEN.*:4002"
      uaa_ca: ((uaa_ca.certificate))
      uaa_client_secret: ((uaa_clients_network_policy_secret))
      uaa_hostname: ((deployment_name))-uaa
    release: cf-networking
  - name: policy-server-internal
    properties:
      ca_cert: ((network_policy_ca.certificate))
      quarks:
        post_start:
          condition:
            exec:
              command:
              - sh
              - -c
              - ss -nlt | grep "LISTEN.*:4003"
        run:
          healthcheck:
            policy-server:
              readiness:
                exec:
                  command:
                  - sh
                  - -c
                  - ss -nlt | grep "LISTEN.*:4003"
      server_cert: ((network_policy_server.certificate))
      server_key: ((network_policy_server.private_key))
    release: cf-networking
  - name: cc_uploader
    properties:
      capi:
        cc_uploader:
          cc:
            ca_cert: ((service_cf_internal_ca.certificate))
            client_cert: ((cc_bridge_cc_uploader.certificate))
            client_key: ((cc_bridge_cc_uploader.private_key))
          mutual_tls:
            ca_cert: ((service_cf_internal_ca.certificate))
            server_cert: ((cc_bridge_cc_uploader_server.certificate))
            server_key: ((cc_bridge_cc_uploader_server.private_key))
      internal_hostname: ((deployment_name))-api
      quarks:
        ports:
        - internal: 9090
          name: http
          protocol: TCP
        - internal: 9091
          name: https
          protocol: TCP
        pre_render_scripts:
          jobs:
          - |
            #!/usr/bin/env bash

            set -o errexit -o nounset

            target="/var/vcap/all-releases/jobs-src/capi/cc_uploader/templates/pre-start.erb"

            # Remove sysctl calls as we are running in containers.
            # cc_uploader_ctl in https://github.com/cloudfoundry/capi-release/blob/master/jobs/cc_uploader/templates/cc_uploader_ctl.erb#L26
            # also skips setting those parameters.
            patch --verbose "${target}" <<'EOT'
            @@ -6,6 +6,3 @@
                  /var/vcap/jobs/bosh-dns/bin/wait
                fi
              fi
            -
            -sysctl -e -w net.ipv4.tcp_fin_timeout=10
            -sysctl -e -w net.ipv4.tcp_tw_reuse=1
            EOT
    release: capi
  - name: loggr-udp-forwarder
    properties:
      loggregator:
        tls:
          ca: ((loggregator_ca.certificate))
          cert: ((loggregator_tls_agent.certificate))
          key: ((loggregator_tls_agent.private_key))
    release: loggregator-agent
  name: api
  networks:
  - name: default
  stemcell: default
  vm_extensions:
  - 50GB_ephemeral_disk
  vm_type: small
- instances: 1
  jobs:
  - name: cloud_controller_worker
    properties:
      cc:
        buildpacks:
          blobstore_type: webdav
          webdav_config:
            blobstore_timeout: 5
            ca_cert: ((service_cf_internal_ca.certificate))
            password: ((blobstore_admin_users_password))
            private_endpoint: https://((deployment_name))-singleton-blobstore:4443
            public_endpoint: https://blobstore.((system_domain))
            username: blobstore-user
        database_encryption:
          current_key_label: encryption_key_0
          keys:
            encryption_key_0: ((cc_db_encryption_key))
        db_encryption_key: ((cc_db_encryption_key))
        diego:
          bbs:
            url: https://((deployment_name))-diego-api:8889
          cc_uploader_url: http://((deployment_name))-api:9090
          file_server_url: http://((deployment_name))-api:8080
        droplets:
          blobstore_type: webdav
          webdav_config:
            blobstore_timeout: 5
            ca_cert: ((service_cf_internal_ca.certificate))
            password: ((blobstore_admin_users_password))
            private_endpoint: https://((deployment_name))-singleton-blobstore:4443
            public_endpoint: https://blobstore.((system_domain))
            username: blobstore-user
        internal_api_password: ((cc_internal_api_password))
        internal_service_hostname: ((deployment_name))-api
        loggregator:
          internal_url: http://((deployment_name))-log-api:8081
        mutual_tls:
          ca_cert: ((service_cf_internal_ca.certificate))
          private_key: ((cc_tls.private_key))
          public_cert: ((cc_tls.certificate))
        packages:
          blobstore_type: webdav
          webdav_config:
            blobstore_timeout: 5
            ca_cert: ((service_cf_internal_ca.certificate))
            password: ((blobstore_admin_users_password))
            private_endpoint: https://((deployment_name))-singleton-blobstore:4443
            public_endpoint: https://blobstore.((system_domain))
            username: blobstore-user
        resource_pool:
          blobstore_type: webdav
          webdav_config:
            blobstore_timeout: 5
            ca_cert: ((service_cf_internal_ca.certificate))
            password: ((blobstore_admin_users_password))
            private_endpoint: https://((deployment_name))-singleton-blobstore:4443
            public_endpoint: https://blobstore.((system_domain))
            username: blobstore-user
        staging_upload_password: ((cc_staging_upload_password))
        staging_upload_user: staging_user
        uaa:
          internal_url: ((deployment_name))-uaa
      ccdb:
        address: ((deployment_name))-database
        ca_cert: ((pxc_server_ca.certificate))
        databases:
        - name: cloud_controller
          tag: cc
        db_scheme: mysql
        port: 3306
        roles:
        - name: cloud_controller
          password: ((cc_database_password))
          tag: admin
      credhub_api:
        hostname: ((deployment_name))-credhub
      routing_api:
        enabled: true
      ssl:
        skip_cert_verify: true
      system_domain: ((system_domain))
      uaa:
        ca_cert: ((uaa_ca.certificate))
        clients:
          cc-service-dashboards:
            secret: ((uaa_clients_cc-service-dashboards_secret))
          cc_routing:
            secret: ((uaa_clients_cc-routing_secret))
    release: capi
  name: cc-worker
  networks:
  - name: default
  stemcell: default
  vm_type: minimal
- instances: 1
  jobs:
  - name: cfdot
    properties:
      bbs:
        hostname: ((deployment_name))-diego-api
      locket:
        hostname: ((deployment_name))-diego-api
      quarks:
        bpm:
          processes: []
      tls:
        ca_certificate: ((service_cf_internal_ca.certificate))
        certificate: ((diego_rep_client.certificate))
        private_key: ((diego_rep_client.private_key))
    release: diego
  - name: auctioneer
    properties:
      bpm:
        enabled: true
      diego:
        auctioneer:
          bbs:
            api_location: ((deployment_name))-diego-api:8889
            ca_cert: ((service_cf_internal_ca.certificate))
            client_cert: ((diego_bbs_client.certificate))
            client_key: ((diego_bbs_client.private_key))
          ca_cert: ((service_cf_internal_ca.certificate))
          locket:
            api_location: ((deployment_name))-diego-api:8891
          rep:
            ca_cert: ((service_cf_internal_ca.certificate))
            client_cert: ((diego_rep_client.certificate))
            client_key: ((diego_rep_client.private_key))
            require_tls: true
          server_cert: ((diego_auctioneer_server.certificate))
          server_key: ((diego_auctioneer_server.private_key))
          skip_consul_lock: true
      enable_consul_service_registration: false
      logging:
        format:
          timestamp: rfc3339
      loggregator:
        ca_cert: ((loggregator_ca.certificate))
        cert: ((loggregator_tls_agent.certificate))
        key: ((loggregator_tls_agent.private_key))
        use_v2_api: true
      quarks:
        ports:
        - internal: 9016
          name: auctioneer
          protocol: TCP
        run:
          healthcheck:
            auctioneer:
              readiness:
                exec:
                  command:
                  - curl
                  - --fail
                  - --head
                  - http://127.0.0.1:8080/health
    release: diego
  - name: cloud_controller_clock
    properties:
      cc:
        buildpacks:
          blobstore_type: webdav
          webdav_config:
            blobstore_timeout: 5
            ca_cert: ((service_cf_internal_ca.certificate))
            password: ((blobstore_admin_users_password))
            private_endpoint: https://((deployment_name))-singleton-blobstore:4443
            public_endpoint: https://blobstore.((system_domain))
            username: blobstore-user
        database_encryption:
          current_key_label: encryption_key_0
          keys:
            encryption_key_0: ((cc_db_encryption_key))
        db_encryption_key: ((cc_db_encryption_key))
        diego:
          bbs:
            url: https://((deployment_name))-diego-api:8889
          cc_uploader_url: http://((deployment_name))-api:9090
          file_server_url: http://((deployment_name))-api:8080
        droplets:
          blobstore_type: webdav
          webdav_config:
            blobstore_timeout: 5
            ca_cert: ((service_cf_internal_ca.certificate))
            password: ((blobstore_admin_users_password))
            private_endpoint: https://((deployment_name))-singleton-blobstore:4443
            public_endpoint: https://blobstore.((system_domain))
            username: blobstore-user
        internal_api_password: ((cc_internal_api_password))
        internal_service_hostname: ((deployment_name))-api
        mutual_tls:
          ca_cert: ((service_cf_internal_ca.certificate))
          private_key: ((cc_tls.private_key))
          public_cert: ((cc_tls.certificate))
        packages:
          blobstore_type: webdav
          webdav_config:
            blobstore_timeout: 5
            ca_cert: ((service_cf_internal_ca.certificate))
            password: ((blobstore_admin_users_password))
            private_endpoint: https://((deployment_name))-singleton-blobstore:4443
            public_endpoint: https://blobstore.((system_domain))
            username: blobstore-user
        resource_pool:
          blobstore_type: webdav
          webdav_config:
            blobstore_timeout: 5
            ca_cert: ((service_cf_internal_ca.certificate))
            password: ((blobstore_admin_users_password))
            private_endpoint: https://((deployment_name))-singleton-blobstore:4443
            public_endpoint: https://blobstore.((system_domain))
            username: blobstore-user
        staging_upload_password: ((cc_staging_upload_password))
        staging_upload_user: staging_user
        uaa:
          internal_url: ((deployment_name))-uaa
      ccdb:
        address: ((deployment_name))-database
        ca_cert: ((pxc_server_ca.certificate))
        databases:
        - name: cloud_controller
          tag: cc
        db_scheme: mysql
        port: 3306
        roles:
        - name: cloud_controller
          password: ((cc_database_password))
          tag: admin
      credhub_api:
        hostname: ((deployment_name))-credhub
      routing_api:
        enabled: true
      ssl:
        skip_cert_verify: true
      system_domain: ((system_domain))
      uaa:
        ca_cert: ((uaa_ca.certificate))
        clients:
          cc-service-dashboards:
            secret: ((uaa_clients_cc-service-dashboards_secret))
          cc_routing:
            secret: ((uaa_clients_cc-routing_secret))
        ssl:
          port: 8443
    release: capi
  - name: cc_deployment_updater
    properties:
      cc:
        db_encryption_key: ((cc_db_encryption_key))
        diego:
          bbs:
            url: https://((deployment_name))-diego-api:8889
          cc_uploader_url: http://((deployment_name))-api:9090
          file_server_url: http://((deployment_name))-api:8080
        locket:
          host: ((deployment_name))-diego-api
        mutual_tls:
          ca_cert: ((service_cf_internal_ca.certificate))
          private_key: ((cc_tls.private_key))
          public_cert: ((cc_tls.certificate))
      ccdb:
        address: ((deployment_name))-database
        databases:
        - name: cloud_controller
          tag: cc
        db_scheme: mysql
        port: 3306
        roles:
        - name: cloud_controller
          password: ((cc_database_password))
          tag: admin
    release: capi
  - name: statsd_injector
    properties:
      loggregator:
        tls:
          ca_cert: ((loggregator_ca.certificate))
          statsd_injector:
            cert: ((loggregator_tls_statsdinjector.certificate))
            key: ((loggregator_tls_statsdinjector.private_key))
    release: statsd-injector
  - name: tps
    properties:
      capi:
        tps:
          bbs:
            api_location: ((deployment_name))-diego-api:8889
            ca_cert: ((service_cf_internal_ca.certificate))
            client_cert: ((diego_bbs_client.certificate))
            client_key: ((diego_bbs_client.private_key))
          cc:
            ca_cert: ((service_cf_internal_ca.certificate))
            client_cert: ((cc_bridge_tps.certificate))
            client_key: ((cc_bridge_tps.private_key))
            internal_service_hostname: ((deployment_name))-api
          watcher:
            locket:
              api_location: ((deployment_name))-diego-api:8891
            skip_consul_lock: true
    release: capi
  - name: ssh_proxy
    properties:
      backends:
        tls:
          ca_certificates:
          - ((application_ca.certificate))
          client_certificate: ((ssh_proxy_backends_tls.certificate))
          client_private_key: ((ssh_proxy_backends_tls.private_key))
          enabled: true
      bpm:
        enabled: true
      diego:
        ssh_proxy:
          bbs:
            api_location: ((deployment_name))-diego-api:8889
            ca_cert: ((service_cf_internal_ca.certificate))
            client_cert: ((diego_bbs_client.certificate))
            client_key: ((diego_bbs_client.private_key))
          disable_healthcheck_server: true
          enable_cf_auth: true
          host_key: ((diego_ssh_proxy_host_key.private_key))
          uaa:
            ca_cert: ((uaa_ca.certificate))
            url: https://((deployment_name))-uaa
          uaa_secret: ((uaa_clients_ssh-proxy_secret))
      enable_consul_service_registration: false
      logging:
        format:
          timestamp: rfc3339
      loggregator:
        ca_cert: ((loggregator_ca.certificate))
        cert: ((loggregator_tls_agent.certificate))
        key: ((loggregator_tls_agent.private_key))
        use_v2_api: true
      quarks:
        ports:
        - internal: 2222
          name: ssh-proxy
          protocol: TCP
    release: diego
  - name: scheduler
    properties:
      quarks:
        run:
          healthcheck:
            scheduler:
              readiness:
                exec:
                  command:
                  - curl
                  - --fail
                  - --head
                  - http://127.0.0.1:8080/health
      scalablesyslog:
        scheduler:
          api:
            url: https://((deployment_name))-api:9023
          tls:
            api:
              ca: ((service_cf_internal_ca.certificate))
              cert: ((scheduler_api_tls.certificate))
              cn: ((deployment_name))-api
              key: ((scheduler_api_tls.private_key))
            client:
              adapter_cn: ss-adapter
              ca: ((loggregator_ca.certificate))
              cert: ((scheduler_client_tls.certificate))
              key: ((scheduler_client_tls.private_key))
    release: cf-syslog-drain
  - name: log-cache-scheduler
    release: log-cache
  - name: log-cache-expvar-forwarder
    properties:
      counters: []
      gauges: []
      loggregator_agent:
        tls:
          ca_cert: ((loggregator_ca.certificate))
          cert: ((log_cache_to_loggregator_agent.certificate))
          key: ((log_cache_to_loggregator_agent.private_key))
      maps:
      - addr: http://localhost:6064/debug/vars
        name: worker-assignments
        source_id: log-cache-scheduler
        template: '{{.WorkerAssignments | jsonMap}}'
      - addr: http://localhost:6064/debug/vars
        name: worker-health
        source_id: log-cache-scheduler
        template: '{{.WorkerHealth | jsonMap}}'
      quarks:
        envs:
        - name: INSTANCE_ADDR
          value: ((deployment_name))-scheduler:8080
        - name: INSTANCE_ID
          value: "0"
    provides:
      log-cache-expvar-forwarder:
        as: this_is_not_used
    release: log-cache
  migrated_from:
  - name: cc-bridge
  - name: cc-clock
  - name: diego-brain
  name: scheduler
  networks:
  - name: default
  stemcell: default
  update:
    serial: true
  vm_extensions:
  - diego-ssh-proxy-network-properties
  vm_type: minimal
- instances: 1
  jobs:
  - name: gorouter
    properties:
      nats:
        machines:
        - ((deployment_name))-nats
      quarks:
        ports:
        - internal: 8000
          name: router
          protocol: TCP
          public: true
        - internal: 443
          name: router-ssl
          protocol: TCP
        post_start:
          condition:
            exec:
              command:
              - curl
              - --fail
              - --head
              - http://127.0.0.1:8080/health
        run:
          healthcheck:
            gorouter:
              readiness:
                exec:
                  command:
                  - curl
                  - --fail
                  - --head
                  - http://127.0.0.1:8080/health
      router:
        backends:
          cert_chain: ((gorouter_backend_tls.certificate))
          private_key: ((gorouter_backend_tls.private_key))
        ca_certs: |
          ((application_ca.certificate))
          ((service_cf_internal_ca.certificate))
        dns_health_check_host: ((deployment_name))-uaa
        enable_ssl: true
        route_services_secret: ((router_route_services_secret))
        status:
          password: ((router_status_password))
          user: router-status
        tls_pem:
        - cert_chain: ((router_ssl.certificate))
          private_key: ((router_ssl.private_key))
        tracing:
          enable_zipkin: true
      routing_api:
        enabled: true
        uri: http://((deployment_name))-api
      uaa:
        ca_cert: ((uaa_ca.certificate))
        clients:
          gorouter:
            secret: ((uaa_clients_gorouter_secret))
        ssl:
          port: 8443
        token_endpoint: ((deployment_name))-uaa
    release: routing
  - name: loggr-udp-forwarder
    properties:
      loggregator:
        tls:
          ca: ((loggregator_ca.certificate))
          cert: ((loggregator_tls_agent.certificate))
          key: ((loggregator_tls_agent.private_key))
    release: loggregator-agent
  name: router
  networks:
  - name: default
  stemcell: default
  update:
    serial: true
  vm_extensions:
  - cf-router-network-properties
  vm_type: minimal
- instances: 1
  jobs:
  - name: doppler
    properties:
      loggregator:
        tls:
          ca_cert: ((loggregator_ca.certificate))
          doppler:
            cert: ((loggregator_tls_doppler.certificate))
            key: ((loggregator_tls_doppler.private_key))
      quarks:
        ports:
        - internal: 3458
          name: dropsonde-tcp
          protocol: TCP
        - internal: 3459
          name: doppler-tls
          protocol: TCP
        - internal: 8081
          name: doppler-ws
          protocol: TCP
        - internal: 8082
          name: doppler-grpc
          protocol: TCP
        - internal: 8083
          name: log-cache-proxy
          protocol: TCP
    provides:
      doppler:
        as: doppler
        shared: true
    release: loggregator
  - name: log-cache
    properties:
      health_addr: localhost:6060
      quarks:
        ports:
        - internal: 8080
          name: log-cache
          protocol: TCP
      tls:
        ca_cert: ((log_cache_ca.certificate))
        cert: ((log_cache.certificate))
        key: ((log_cache.private_key))
    provides:
      log-cache:
        shared: true
    release: log-cache
  - name: log-cache-gateway
    properties:
      gateway_addr: localhost:8081
    release: log-cache
  - consumes:
      reverse_log_proxy:
        from: reverse_log_proxy
    name: log-cache-nozzle
    properties:
      logs_provider:
        tls:
          ca_cert: ((loggregator_ca.certificate))
          cert: ((logs_provider.certificate))
          key: ((logs_provider.private_key))
    release: log-cache
  - name: log-cache-expvar-forwarder
    properties:
      counters:
      - addr: http://localhost:6060/debug/vars
        name: egress
        source_id: log-cache
        template: '{{.LogCache.Egress}}'
      - addr: http://localhost:6060/debug/vars
        name: ingress
        source_id: log-cache
        template: '{{.LogCache.Ingress}}'
      - addr: http://localhost:6060/debug/vars
        name: expired
        source_id: log-cache
        template: '{{.LogCache.Expired}}'
      - addr: http://localhost:6060/debug/vars
        name: dropped
        source_id: log-cache
        template: '{{.LogCache.Dropped}}'
      - addr: http://localhost:6060/debug/vars
        name: promql-timeout
        source_id: log-cache
        template: '{{.LogCache.PromQLTimeout}}'
      - addr: http://localhost:6061/debug/vars
        name: egress
        source_id: log-cache-nozzle
        template: '{{.Nozzle.Egress}}'
      - addr: http://localhost:6061/debug/vars
        name: ingress
        source_id: log-cache-nozzle
        template: '{{.Nozzle.Ingress}}'
      - addr: http://localhost:6061/debug/vars
        name: err
        source_id: log-cache-nozzle
        template: '{{.Nozzle.Err}}'
      - addr: http://localhost:6061/debug/vars
        name: dropped
        source_id: log-cache-nozzle
        template: '{{.Nozzle.Dropped}}'
      gauges:
      - addr: http://localhost:6060/debug/vars
        name: cache-period
        source_id: log-cache
        template: '{{.LogCache.CachePeriod}}'
      - addr: http://localhost:6060/debug/vars
        name: store-size
        source_id: log-cache
        template: '{{.LogCache.StoreSize}}'
      - addr: http://localhost:6060/debug/vars
        name: total-system-memory
        source_id: log-cache
        template: '{{.LogCache.TotalSystemMemory}}'
      - addr: http://localhost:6060/debug/vars
        name: available-system-memory
        source_id: log-cache
        template: '{{.LogCache.AvailableSystemMemory}}'
      - addr: http://localhost:6060/debug/vars
        name: uptime
        source_id: log-cache
        template: '{{.LogCache.Uptime}}'
      - addr: http://localhost:6060/debug/vars
        name: promql-instant-query-time
        source_id: log-cache
        template: '{{.LogCache.PromQLInstantQueryTime}}'
      - addr: http://localhost:6060/debug/vars
        name: promql-range-query-time
        source_id: log-cache
        template: '{{.LogCache.PromQLRangeQueryTime}}'
      - addr: http://localhost:6065/debug/vars
        name: last-uaa-latency
        source_id: log-cache-cf-auth-proxy
        template: '{{.CFAuthProxy.LastUAALatency}}'
      - addr: http://localhost:6065/debug/vars
        name: last-capi-v3-apps-latency
        source_id: log-cache-cf-auth-proxy
        template: '{{.CFAuthProxy.LastCAPIV3AppsLatency}}'
      - addr: http://localhost:6065/debug/vars
        name: last-capi-v2-list-service-instances-latency
        source_id: log-cache-cf-auth-proxy
        template: '{{.CFAuthProxy.LastCAPIV2ListServiceInstancesLatency}}'
      - addr: http://localhost:6065/debug/vars
        name: last-capi-v4-log-access-latency
        source_id: log-cache-cf-auth-proxy
        template: '{{.CFAuthProxy.LastCAPIV4LogAccessLatency}}'
      - addr: http://localhost:6065/debug/vars
        name: last-capi-v2-service-instances-latency
        source_id: log-cache-cf-auth-proxy
        template: '{{.CFAuthProxy.LastCAPIV2ServiceInstancesLatency}}'
      loggregator_agent:
        tls:
          ca_cert: ((loggregator_ca.certificate))
          cert: ((log_cache_to_loggregator_agent.certificate))
          key: ((log_cache_to_loggregator_agent.private_key))
      maps: []
      quarks:
        envs:
        - name: INSTANCE_ADDR
          value: ((deployment_name))-doppler:8080
        - name: INSTANCE_ID
          value: "0"
    release: log-cache
  - name: route_registrar
    properties:
      nats:
        machines:
        - ((deployment_name))-nats
      route_registrar:
        routes:
        - name: log-cache-reverse-proxy
          port: 8083
          registration_interval: 20s
          server_cert_domain_san: log-cache.((system_domain))
          tls_port: 8083
          uris:
          - log-cache.((system_domain))
          - '*.log-cache.((system_domain))'
        routing_api:
          api_url: http://((deployment_name))-api:3000
          oauth_url: https://((deployment_name))-uaa:8443
    release: routing
  - name: log-cache-cf-auth-proxy
    properties:
      cc:
        ca_cert: ((service_cf_internal_ca.certificate))
        common_name: cloud-controller-ng.service.cf.internal
      external_cert: ((logcache_ssl.certificate))
      external_key: ((logcache_ssl.private_key))
      proxy_port: 8083
      uaa:
        ca_cert: ((uaa_ca.certificate))
        client_id: doppler
        client_secret: ((uaa_clients_doppler_secret))
        internal_addr: https://uaa.service.cf.internal:8443
    release: log-cache
  name: doppler
  networks:
  - name: default
  stemcell: default
  vm_type: minimal
- env:
    bosh:
      agent:
        settings:
          annotations:
            container.apparmor.security.beta.kubernetes.io/bpm-pre-start-rep: unconfined
            container.apparmor.security.beta.kubernetes.io/rep-rep: unconfined
  instances: 1
  jobs:
  - name: cflinuxfs3-rootfs-setup
    properties:
      cflinuxfs3-rootfs:
        trusted_certs:
        - ((application_ca.certificate))
        - ((credhub_ca.certificate))
        - ((uaa_ca.certificate))
      quarks:
        bpm:
          processes: []
        pre_render_scripts:
          jobs:
          - |
            #!/usr/bin/env bash

            set -o errexit -o nounset

            target="/var/vcap/all-releases/jobs-src/cflinuxfs3/cflinuxfs3-rootfs-setup/templates/pre-start"

            # Use the ephemeral data directory for the rootfs
            patch --verbose "${target}" <<'EOT'
            @@ -3,8 +3,8 @@

              CONF_DIR=/var/vcap/jobs/cflinuxfs3-rootfs-setup/config
              ROOTFS_PACKAGE=/var/vcap/packages/cflinuxfs3
            -ROOTFS_DIR=$ROOTFS_PACKAGE/rootfs
            -ROOTFS_TAR=$ROOTFS_PACKAGE/rootfs.tar
            +ROOTFS_DIR=/var/vcap/data/rep/cflinuxfs3/rootfs
            +ROOTFS_TAR=/var/vcap/data/rep/cflinuxfs3/rootfs.tar
              TRUSTED_CERT_FILE=$CONF_DIR/certs/trusted_ca.crt
              CA_DIR=$ROOTFS_DIR/usr/local/share/ca-certificates/
            EOT
    release: cflinuxfs3
  - name: garden
    properties:
      bpm:
        enabled: true
      garden:
        apparmor_profile: ""
        cleanup_process_dirs_on_wait: false
        containerd_mode: false
        debug_listen_address: 127.0.0.1:17019
        default_container_grace_time: 0
        deny_networks:
        - 0.0.0.0/0
        destroy_containers_on_start: true
        disable_swap_limit: true
        network_pool: 10.38.0.0/16
      logging:
        format:
          timestamp: rfc3339
      quarks:
        post_start:
          condition:
            exec:
              command:
              - sh
              - -c
              - ss -nlt | grep "LISTEN.*:17019"
        pre_render_scripts:
          jobs:
          - |
            #!/usr/bin/env bash

            set -o errexit -o nounset

            target="/var/vcap/all-releases/jobs-src/garden-runc/garden/templates/bin/post-start"

            # Patch the post-start script to use netcat instead of curl when performing the ping to a unix
            # socket. curl support for unix sockets varies considerably depending on its version.
            patch --binary --verbose "${target}" <<'EOT'
            @@ -1,19 +1,21 @@
              #!/usr/bin/env bash
              set -euo pipefail

            -# shellcheck disable=SC1091
            -source /var/vcap/jobs/garden/bin/post-start-env
            -curl_args=("${curl_args[@]}")  # ensure curl_args is defined
            -
              start="$( date +%s )"
              timeout=120

              echo "$(date): Pinging garden server..."
              i=1

            +<% if p("garden.listen_network") == "tcp" -%>
            +cmd='curl -s <%= p("garden.listen_address") %>/ping'
            +<% else -%>
            +cmd='echo -e "GET /ping HTTP/1.1\r\n\r\n" | nc -U <%= p("garden.listen_address") %>'
            +<% end -%>
            +
              while [ $(( $(date +%s) - timeout )) -lt "$start" ]; do
                echo "$(date): Attempt $i..."
            -  if curl -s "${curl_args[@]}"; then
            +  if sh -c "${cmd}"; then
                  echo "$(date): Success!"
                  exit 0
                fi
            EOT
        run:
          healthcheck:
            garden:
              readiness:
                exec:
                  command:
                  - sh
                  - -c
                  - ss -nlt | grep "LISTEN.*:17019"
    release: garden-runc
  - name: rep
    properties:
      bpm:
        enabled: true
      containers:
        trusted_ca_certificates:
        - ((application_ca.certificate))
        - ((credhub_ca.certificate))
        - ((uaa_ca.certificate))
      diego:
        executor:
          instance_identity_ca_cert: ((diego_instance_identity_ca.certificate))
          instance_identity_key: ((diego_instance_identity_ca.private_key))
        rep:
          advertise_domain: ((deployment_name))-diego-cell
          bbs:
            api_location: ((deployment_name))-diego-api:8889
          locket:
            api_location: ((deployment_name))-diego-api:8891
          preloaded_rootfses:
          - cflinuxfs3:/var/vcap/data/rep/cflinuxfs3/rootfs.tar
      enable_consul_service_registration: false
      enable_declarative_healthcheck: true
      logging:
        format:
          timestamp: rfc3339
      loggregator:
        ca_cert: ((loggregator_ca.certificate))
        cert: ((loggregator_tls_agent.certificate))
        key: ((loggregator_tls_agent.private_key))
        use_v2_api: true
      quarks:
        ports:
        - internal: 1800
          name: rep
          protocol: TCP
        - internal: 1801
          name: rep-tls
          protocol: TCP
        post_start:
          condition:
            exec:
              command:
              - sh
              - -c
              - ss -nlt | grep "LISTEN.*:1800"
        pre_render_scripts:
          jobs:
          - |
            #!/usr/bin/env bash

            set -o errexit -o nounset

            target="/var/vcap/all-releases/jobs-src/diego/rep/templates/bpm-pre-start.erb"

            # Use the ephemeral data directory for the rootfs.
            patch --verbose "${target}" <<'EOT'
            @@ -5,3 +5,7 @@
              $bin_dir/set-rep-kernel-params

              $bin_dir/setup_mounted_data_dirs
            +
            +mkdir -p /var/vcap/data/shared-packages/
            +cp -r /var/vcap/packages/healthcheck /var/vcap/data/shared-packages/
            +cp -r /var/vcap/packages/proxy /var/vcap/data/shared-packages/
            EOT
          - |
            #!/usr/bin/env bash

            set -o errexit -o nounset

            target="/var/vcap/all-releases/jobs-src/diego/rep/templates/rep.json.erb"

            # Don't share /var/vcap/packages between containers.
            patch --verbose "${target}" <<'EOT'
            @@ -39,7 +39,7 @@
                  disk_mb: p("diego.executor.disk_capacity_mb").to_s,
                  enable_consul_service_registration: p("enable_consul_service_registration"),
                  enable_declarative_healthcheck: p("enable_declarative_healthcheck"),
            -    declarative_healthcheck_path: "/var/vcap/packages/healthcheck",
            +    declarative_healthcheck_path: "/var/vcap/data/shared-packages/healthcheck",
                  enable_container_proxy: p("containers.proxy.enabled"),
                  container_proxy_require_and_verify_client_certs: p("containers.proxy.require_and_verify_client_certificates"),
                  container_proxy_trusted_ca_certs: p("containers.proxy.trusted_ca_certificates"),
            @@ -47,7 +47,7 @@
                  container_proxy_ads_addresses: p("containers.proxy.ads_addresses"),
                  enable_unproxied_port_mappings: p("containers.proxy.enable_unproxied_port_mappings"),
                  proxy_memory_allocation_mb: p("containers.proxy.additional_memory_allocation_mb"),
            -    container_proxy_path: "/var/vcap/packages/proxy",
            +    container_proxy_path: "/var/vcap/data/shared-packages/proxy",
                  container_proxy_config_path: "/var/vcap/data/rep/shared/garden/proxy_config",
                  evacuation_polling_interval: "#{p("diego.rep.evacuation_polling_interval_in_seconds")}s",
                  evacuation_timeout: "#{p("diego.rep.evacuation_timeout_in_seconds")}s",
            EOT
        run:
          healthcheck:
            rep:
              readiness:
                exec:
                  command:
                  - sh
                  - -c
                  - ss -nlt | grep "LISTEN.*:1800"
          security_context:
            capabilities:
              add:
              - SYS_ADMIN
      set_kernel_parameters: false
      tls:
        ca_cert: ((service_cf_internal_ca.certificate))
        cert: ((diego_rep_agent_v2.certificate))
        key: ((diego_rep_agent_v2.private_key))
    release: diego
  - name: cfdot
    properties:
      bbs:
        hostname: ((deployment_name))-diego-api
      locket:
        hostname: ((deployment_name))-diego-api
      quarks:
        bpm:
          processes: []
      tls:
        ca_certificate: ((service_cf_internal_ca.certificate))
        certificate: ((diego_rep_client.certificate))
        private_key: ((diego_rep_client.private_key))
    release: diego
  - name: route_emitter
    properties:
      bpm:
        enabled: true
      diego:
        route_emitter:
          bbs:
            api_location: ((deployment_name))-diego-api:8889
            ca_cert: ((service_cf_internal_ca.certificate))
            client_cert: ((diego_bbs_client.certificate))
            client_key: ((diego_bbs_client.private_key))
          local_mode: true
          nats:
            machines:
            - ((deployment_name))-nats
      locks:
        locket:
          hostname: ((deployment_name))-diego-api
      logging:
        format:
          timestamp: rfc3339
      loggregator:
        ca_cert: ((loggregator_ca.certificate))
        cert: ((loggregator_tls_agent.certificate))
        key: ((loggregator_tls_agent.private_key))
        use_v2_api: true
      quarks:
        post_start:
          condition:
            exec:
              command:
              - curl
              - --fail
              - --silent
              - http://127.0.0.1:17011/ping
        run:
          healthcheck:
            route_emitter:
              readiness:
                exec:
                  command:
                  - curl
                  - --fail
                  - --silent
                  - http://127.0.0.1:17011/ping
      routing_api:
        url: http://((deployment_name))-api
      tcp:
        enabled: true
      uaa:
        ca_cert: ((uaa_ca.certificate))
        client_secret: ((uaa_clients_tcp_emitter_secret))
        hostname: ((deployment_name))-uaa
    release: diego
  name: diego-cell
  networks:
  - name: default
  stemcell: default
  vm_extensions:
  - 100GB_ephemeral_disk
  vm_type: small-highmem
- instances: 1
  jobs:
  - consumes:
      doppler:
        from: doppler
    name: loggregator_trafficcontroller
    properties:
      cc:
        internal_service_hostname: ((deployment_name))-api
        mutual_tls:
          ca_cert: ((service_cf_internal_ca.certificate))
        tls_port: 9023
      loggregator:
        outgoing_cert: ((loggregator_trafficcontroller_tls.certificate))
        outgoing_key: ((loggregator_trafficcontroller_tls.private_key))
        tls:
          ca_cert: ((loggregator_ca.certificate))
          cc_trafficcontroller:
            cert: ((loggregator_tls_cc_tc.certificate))
            key: ((loggregator_tls_cc_tc.private_key))
          trafficcontroller:
            cert: ((loggregator_tls_tc.certificate))
            key: ((loggregator_tls_tc.private_key))
        uaa:
          client_secret: ((uaa_clients_doppler_secret))
      quarks:
        envs:
        - name: TRAFFIC_CONTROLLER_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        ports:
        - internal: 8081
          name: dropsonde
          protocol: TCP
      ssl:
        skip_cert_verify: true
      system_domain: ((system_domain))
      uaa:
        ca_cert: ((uaa_ca.certificate))
        internal_url: https://((deployment_name))-uaa:8443
    release: loggregator
  - name: reverse_log_proxy
    properties:
      loggregator:
        tls:
          ca_cert: ((loggregator_ca.certificate))
          reverse_log_proxy:
            cert: ((loggregator_tls_rlp.certificate))
            key: ((loggregator_tls_rlp.private_key))
      quarks:
        ports:
        - internal: 8082
          name: grpc-egress
          protocol: TCP
    provides:
      reverse_log_proxy:
        as: reverse_log_proxy
        shared: true
    release: loggregator
  - name: reverse_log_proxy_gateway
    properties:
      cc:
        ca_cert: ((service_cf_internal_ca.certificate))
        capi_internal_addr: https://((deployment_name))-api:9023
        cert: ((loggregator_rlp_gateway_tls_cc.certificate))
        common_name: ((deployment_name))-api
        key: ((loggregator_rlp_gateway_tls_cc.private_key))
      http:
        address: 0.0.0.0:8088
        cert: ((loggregator_rlp_gateway_tls.certificate))
        key: ((loggregator_rlp_gateway_tls.private_key))
      logs_provider:
        ca_cert: ((loggregator_ca.certificate))
        client_cert: ((loggregator_rlp_gateway.certificate))
        client_key: ((loggregator_rlp_gateway.private_key))
      uaa:
        ca_cert: ((uaa_ca.certificate))
        client_id: doppler
        client_secret: ((uaa_clients_doppler_secret))
        internal_addr: https://((deployment_name))-uaa:8443
    release: loggregator
  - name: route_registrar
    properties:
      nats:
        machines:
        - ((deployment_name))-nats
      route_registrar:
        routes:
        - name: doppler
          registration_interval: 20s
          server_cert_domain_san: doppler.((system_domain))
          tls_port: 8081
          uris:
          - doppler.((system_domain))
          - '*.doppler.((system_domain))'
        - name: rlp-gateway
          registration_interval: 20s
          server_cert_domain_san: log-stream.((system_domain))
          tls_port: 8088
          uris:
          - log-stream.((system_domain))
          - '*.log-stream.((system_domain))'
        routing_api:
          api_url: http://((deployment_name))-api:3000
          oauth_url: https://((deployment_name))-uaa:8443
    release: routing
  name: log-api
  networks:
  - name: default
  stemcell: default
  update:
    serial: true
  vm_type: minimal
manifest_version: v8.0.0
name: cf
releases:
- name: binary-buildpack
  url: docker.io/cfcontainerization
  version: 1.0.31
- name: bpm
  url: docker.io/cfcontainerization
  version: 1.0.4
- name: capi
  url: docker.io/cfcontainerization
  version: 1.83.0
- name: cf-networking
  url: docker.io/cfcontainerization
  version: 2.22.0
- name: cf-smoke-tests
  url: docker.io/cfcontainerization
  version: 40.0.51
- name: cf-syslog-drain
  url: docker.io/cfcontainerization
  version: "10.1"
- name: cflinuxfs3
  url: docker.io/cfcontainerization
  version: 0.81.0
- name: credhub
  url: docker.io/cfcontainerization
  version: 2.2.0
- name: diego
  url: docker.io/cfcontainerization
  version: 2.30.0
- name: dotnet-core-buildpack
  url: docker.io/cfcontainerization
  version: 2.2.7
- name: garden-runc
  url: docker.io/cfcontainerization
  version: 1.19.1
- name: go-buildpack
  url: docker.io/cfcontainerization
  version: 1.8.35
- name: java-buildpack
  url: docker.io/cfcontainerization
  version: "4.18"
- name: loggregator
  url: docker.io/cfcontainerization
  version: "105.3"
- name: nats
  url: docker.io/cfcontainerization
  version: "26"
- name: nginx-buildpack
  url: docker.io/cfcontainerization
  version: 1.0.9
- name: r-buildpack
  url: docker.io/cfcontainerization
  version: 1.0.7
- name: nodejs-buildpack
  url: docker.io/cfcontainerization
  version: 1.6.45
- name: php-buildpack
  url: docker.io/cfcontainerization
  version: 4.3.72
- name: python-buildpack
  url: docker.io/cfcontainerization
  version: 1.6.29
- name: routing
  url: docker.io/cfcontainerization
  version: 0.187.0
- name: ruby-buildpack
  url: docker.io/cfcontainerization
  version: 1.7.36
- name: silk
  url: docker.io/cfcontainerization
  version: 2.22.0
- name: staticfile-buildpack
  url: docker.io/cfcontainerization
  version: 1.4.40
- name: statsd-injector
  url: docker.io/cfcontainerization
  version: 1.10.0
- name: uaa
  url: docker.io/cfcontainerization
  version: "72.0"
- name: loggregator-agent
  url: docker.io/cfcontainerization
  version: "3.9"
- name: log-cache
  url: docker.io/cfcontainerization
  version: 2.2.0
- name: bosh-dns-aliases
  url: docker.io/cfcontainerization
  version: 0.0.3
- name: cf-cli
  url: docker.io/cfcontainerization
  version: 1.13.0
- name: cf-mysql
  sha1: null
  url: docker.io/cfcontainerization
  version: 36.19.0
stemcells:
- alias: default
  os: opensuse-42.3
  version: 36.g03b4653-30.80-7.0.0_340.g2b599a90
update:
  canaries: 1
  canary_watch_time: 30000-1200000
  max_in_flight: 1
  serial: false
  update_watch_time: 5000-1200000
variables:
- name: blobstore_admin_users_password
  type: password
- name: blobstore_secure_link_secret
  type: password
- name: cc_bulk_api_password
  type: password
- name: cc_db_encryption_key
  type: password
- name: cc_internal_api_password
  type: password
- name: cc_staging_upload_password
  type: password
- name: cf_mysql_mysql_admin_password
  type: password
- name: cf_mysql_mysql_cluster_health_password
  type: password
- name: cf_mysql_mysql_galera_healthcheck_endpoint_password
  type: password
- name: cf_mysql_mysql_galera_healthcheck_password
  type: password
- name: cf_mysql_proxy_api_password
  type: password
- name: cc_database_password
  type: password
- name: credhub_database_password
  type: password
- name: diego_database_password
  type: password
- name: uaa_database_password
  type: password
- name: routing_api_database_password
  type: password
- name: network_policy_database_password
  type: password
- name: network_connectivity_database_password
  type: password
- name: uaa_default_encryption_passphrase
  type: password
- name: network_policy_ca
  options:
    common_name: networkPolicyCA
    is_ca: true
  type: certificate
- name: network_policy_server
  options:
    alternative_names:
    - ((deployment_name))-api
    - '*.((deployment_name))-api'
    ca: network_policy_ca
    common_name: policy-server.service.cf.internal
    extended_key_usage:
    - server_auth
  type: certificate
- name: network_policy_client
  options:
    alternative_names:
    - ((deployment_name))-diego-cell
    - '*.((deployment_name))-diego-cell'
    ca: network_policy_ca
    common_name: clientName
    extended_key_usage:
    - client_auth
  type: certificate
- name: uaa_clients_routing_api_client_secret
  type: password
- name: uaa_clients_tcp_emitter_secret
  type: password
- name: nats_password
  type: password
- name: router_status_password
  type: password
- name: cf_admin_password
  type: password
- name: cf_bosh_password
  type: password
- name: router_route_services_secret
  type: password
- name: uaa_admin_client_secret
  type: password
- name: uaa_clients_cc-routing_secret
  type: password
- name: uaa_clients_cc-service-dashboards_secret
  type: password
- name: uaa_clients_cc_service_key_client_secret
  type: password
- name: uaa_clients_cf_smoke_tests_secret
  type: password
- name: uaa_clients_cloud_controller_username_lookup_secret
  type: password
- name: uaa_clients_doppler_secret
  type: password
- name: uaa_clients_gorouter_secret
  type: password
- name: uaa_clients_network_policy_secret
  type: password
- name: uaa_clients_ssh-proxy_secret
  type: password
- name: uaa_clients_tcp_router_secret
  type: password
- name: diego_bbs_encryption_keys_passphrase
  type: password
- name: credhub_admin_client_secret
  type: password
- name: diego_ssh_proxy_host_key
  type: ssh
- name: uaa_jwt_signing_key
  type: rsa
- name: service_cf_internal_ca
  options:
    common_name: internalCA
    is_ca: true
  type: certificate
- name: blobstore_tls
  options:
    alternative_names:
    - ((deployment_name))-singleton-blobstore
    - ((deployment_name))-singleton-blobstore.default
    - '*.((deployment_name))-singleton-blobstore'
    - '*.((deployment_name))-singleton-blobstore.default'
    ca: service_cf_internal_ca
    common_name: blobstore.service.cf.internal
  type: certificate
- name: diego_auctioneer_client
  options:
    alternative_names:
    - ((deployment_name))-diego-api
    - '*.((deployment_name))-diego-api'
    ca: service_cf_internal_ca
    common_name: auctioneer client
    extended_key_usage:
    - client_auth
  type: certificate
- name: diego_auctioneer_server
  options:
    alternative_names:
    - '*.auctioneer.service.cf.internal'
    - auctioneer.service.cf.internal
    - ((deployment_name))-scheduler
    - '*.((deployment_name))-scheduler'
    ca: service_cf_internal_ca
    common_name: auctioneer.service.cf.internal
    extended_key_usage:
    - server_auth
  type: certificate
- name: diego_bbs_client
  options:
    alternative_names:
    - ((deployment_name))-diego-cell
    - '*.((deployment_name))-diego-cell'
    ca: service_cf_internal_ca
    common_name: bbs client
    extended_key_usage:
    - client_auth
  type: certificate
- name: diego_bbs_server
  options:
    alternative_names:
    - '*.bbs.service.cf.internal'
    - bbs.service.cf.internal
    - ((deployment_name))-diego-api
    - 127.0.0.1
    - ((deployment_name))-diego-api-0
    - '*.((deployment_name))-diego-api'
    ca: service_cf_internal_ca
    common_name: bbs.service.cf.internal
    extended_key_usage:
    - server_auth
    - client_auth
  type: certificate
- name: diego_rep_client
  options:
    alternative_names:
    - ((deployment_name))-diego-api
    - '*.((deployment_name))-diego-api'
    ca: service_cf_internal_ca
    common_name: rep client
    extended_key_usage:
    - client_auth
  type: certificate
- name: diego_rep_agent_v2
  options:
    alternative_names:
    - '*.cell.service.cf.internal'
    - cell.service.cf.internal
    - 127.0.0.1
    - localhost
    - ((deployment_name))-diego-cell
    - '*.((deployment_name))-diego-cell'
    - 127.0.0.1
    - localhost
    ca: service_cf_internal_ca
    common_name: cell.service.cf.internal
    extended_key_usage:
    - client_auth
    - server_auth
  type: certificate
- name: loggregator_ca
  options:
    common_name: loggregatorCA
    is_ca: true
  type: certificate
- name: expvar_forwarder
  options:
    ca: loggregator_ca
    common_name: expvar_forwarder
    extended_key_usage:
    - client_auth
  type: certificate
- name: loggregator_tls_statsdinjector
  options:
    alternative_names:
    - ((deployment_name))-uaa
    - '*.((deployment_name))-uaa'
    ca: loggregator_ca
    common_name: statsdinjector
    extended_key_usage:
    - client_auth
  type: certificate
- name: loggregator_tls_agent
  options:
    ca: loggregator_ca
    common_name: metron
    extended_key_usage:
    - client_auth
    - server_auth
  type: certificate
- name: loggregator_tls_doppler
  options:
    alternative_names:
    - ((deployment_name))-doppler
    - metron
    - '*.((deployment_name))-doppler'
    ca: loggregator_ca
    common_name: doppler
    extended_key_usage:
    - client_auth
    - server_auth
  type: certificate
- name: loggregator_tls_tc
  options:
    alternative_names:
    - ((deployment_name))-log-api
    - '*.((deployment_name))-log-api'
    ca: loggregator_ca
    common_name: trafficcontroller
    extended_key_usage:
    - client_auth
    - server_auth
  type: certificate
- name: loggregator_tls_cc_tc
  options:
    alternative_names:
    - ((deployment_name))-log-api
    - '*.((deployment_name))-log-api'
    ca: service_cf_internal_ca
    common_name: trafficcontroller
    extended_key_usage:
    - client_auth
  type: certificate
- name: loggregator_rlp_gateway_tls_cc
  options:
    alternative_names:
    - ((deployment_name))-log-api
    - '*.((deployment_name))-log-api'
    ca: service_cf_internal_ca
    common_name: rlp-gateway
    extended_key_usage:
    - client_auth
  type: certificate
- name: loggregator_tls_rlp
  options:
    alternative_names:
    - ((deployment_name))-log-api
    - '*.((deployment_name))-log-api'
    ca: loggregator_ca
    common_name: reverselogproxy
    extended_key_usage:
    - client_auth
    - server_auth
  type: certificate
- name: loggregator_rlp_gateway
  options:
    alternative_names:
    - ((deployment_name))-log-api
    - '*.((deployment_name))-log-api'
    ca: loggregator_ca
    common_name: rlp_gateway
    extended_key_usage:
    - client_auth
  type: certificate
- name: adapter_rlp_tls
  options:
    alternative_names:
    - ((deployment_name))-adapter
    - '*.((deployment_name))-adapter'
    ca: loggregator_ca
    common_name: ss-adapter-rlp
    extended_key_usage:
    - client_auth
    - server_auth
  type: certificate
- name: scheduler_api_tls
  options:
    alternative_names:
    - ((deployment_name))-scheduler
    - '*.((deployment_name))-scheduler'
    ca: service_cf_internal_ca
    common_name: ss-scheduler
    extended_key_usage:
    - client_auth
    - server_auth
  type: certificate
- name: adapter_tls
  options:
    alternative_names:
    - ((deployment_name))-adapter
    - '*.((deployment_name))-adapter'
    ca: loggregator_ca
    common_name: ss-adapter
    extended_key_usage:
    - server_auth
    - client_auth
  type: certificate
- name: scheduler_client_tls
  options:
    alternative_names:
    - ((deployment_name))-scheduler
    - '*.((deployment_name))-scheduler'
    ca: loggregator_ca
    common_name: ss-scheduler
    extended_key_usage:
    - client_auth
  type: certificate
- name: logs_provider
  options:
    alternative_names:
    - ((deployment_name))-doppler
    - '*.((deployment_name))-doppler'
    ca: loggregator_ca
    common_name: log-cache
    extended_key_usage:
    - client_auth
    - server_auth
  type: certificate
- name: log_cache_ca
  options:
    common_name: log-cache-ca
    is_ca: true
  type: certificate
- name: log_cache
  options:
    alternative_names:
    - log_cache
    - log-cache
    - logcache
    - ((deployment_name))-doppler
    - ((deployment_name))-scheduler
    - '*.((deployment_name))-doppler'
    - '*.((deployment_name))-scheduler'
    ca: log_cache_ca
    common_name: log-cache
    extended_key_usage:
    - client_auth
    - server_auth
  type: certificate
- name: log_cache_to_loggregator_agent
  options:
    alternative_names:
    - ((deployment_name))-scheduler
    - ((deployment_name))-doppler
    - '*.((deployment_name))-scheduler'
    - '*.((deployment_name))-doppler'
    ca: loggregator_ca
    common_name: log-cache
    extended_key_usage:
    - client_auth
  type: certificate
- name: cc_logcache_tls
  options:
    alternative_names:
    - api.((system_domain))
    - cloud-controller-ng.service.cf.internal
    - ((deployment_name))-api
    - '*.((deployment_name))-api'
    ca: log_cache_ca
    common_name: api.((system_domain))
  type: certificate
- name: logcache_ssl
  options:
    alternative_names:
    - log-cache.((system_domain))
    - '*.log-cache.((system_domain))'
    - ((deployment_name))-doppler
    - '*.((deployment_name))-doppler'
    ca: service_cf_internal_ca
    common_name: log-cache
  type: certificate
- name: router_ca
  options:
    common_name: routerCA
    is_ca: true
  type: certificate
- name: router_ssl
  options:
    alternative_names:
    - ((system_domain))
    - '*.((system_domain))'
    - ((deployment_name))-router
    - '*.((deployment_name))-router'
    ca: router_ca
    common_name: routerSSL
  type: certificate
- name: uaa_ca
  options:
    common_name: uaaCA
    is_ca: true
  type: certificate
- name: uaa_ssl
  options:
    alternative_names:
    - uaa.service.cf.internal
    - ((deployment_name))-uaa
    - '*.((deployment_name))-uaa'
    ca: uaa_ca
    common_name: uaa.service.cf.internal
  type: certificate
- name: uaa_login_saml
  options:
    alternative_names:
    - ((deployment_name))-uaa
    - '*.((deployment_name))-uaa'
    ca: uaa_ca
    common_name: uaa_login_saml
  type: certificate
- name: cc_tls
  options:
    alternative_names:
    - ((deployment_name))-api
    - ((deployment_name))-api.default
    - '*.((deployment_name))-api'
    ca: service_cf_internal_ca
    common_name: cloud-controller-ng.service.cf.internal
    extended_key_usage:
    - client_auth
    - server_auth
  type: certificate
- name: cc_public_tls
  options:
    alternative_names:
    - api.((system_domain))
    - cloud-controller-ng.service.cf.internal
    - ((deployment_name))-api
    - ((deployment_name))-api.default
    - '*.((deployment_name))-api'
    ca: service_cf_internal_ca
    common_name: api.((system_domain))
  type: certificate
- name: cc_bridge_tps
  options:
    alternative_names:
    - ((deployment_name))-scheduler
    - '*.((deployment_name))-scheduler'
    ca: service_cf_internal_ca
    common_name: tps_watcher
    extended_key_usage:
    - client_auth
  type: certificate
- name: cc_bridge_cc_uploader
  options:
    alternative_names:
    - ((deployment_name))-api
    - '*.((deployment_name))-api'
    ca: service_cf_internal_ca
    common_name: cc_uploader
    extended_key_usage:
    - client_auth
  type: certificate
- name: cc_bridge_cc_uploader_server
  options:
    alternative_names:
    - ((deployment_name))-api
    - 127.0.0.1
    - ((deployment_name))-api.default
    - '*.((deployment_name))-api'
    ca: service_cf_internal_ca
    common_name: cc-uploader.service.cf.internal
    extended_key_usage:
    - server_auth
  type: certificate
- name: diego_locket_server
  options:
    alternative_names:
    - '*.locket.service.cf.internal'
    - locket.service.cf.internal
    - ((deployment_name))-diego-api
    - '*.((deployment_name))-diego-api'
    - 127.0.0.1
    ca: service_cf_internal_ca
    common_name: locket.service.cf.internal
    extended_key_usage:
    - server_auth
  type: certificate
- name: diego_locket_client
  options:
    alternative_names:
    - ((deployment_name))-api
    - '*.((deployment_name))-api'
    ca: service_cf_internal_ca
    common_name: locket client
    extended_key_usage:
    - client_auth
  type: certificate
- name: locket_database_password
  type: password
- name: application_ca
  options:
    common_name: appRootCA
    is_ca: true
  type: certificate
- name: diego_instance_identity_ca
  options:
    ca: application_ca
    common_name: instanceIdentityCA
    is_ca: true
  type: certificate
- name: gorouter_backend_tls
  options:
    alternative_names:
    - gorouter.service.cf.internal
    - ((deployment_name))-router
    - '*.((deployment_name))-router'
    ca: service_cf_internal_ca
    common_name: gorouter_backend_tls
    extended_key_usage:
    - client_auth
  type: certificate
- name: credhub_ca
  options:
    common_name: credhubServerCa
    is_ca: true
  type: certificate
- name: ssh_proxy_backends_tls
  options:
    alternative_names:
    - ssh-proxy.service.cf.internal
    - ((deployment_name))-scheduler
    - '*.((deployment_name))-scheduler'
    ca: service_cf_internal_ca
    common_name: ssh_proxy_backends_tls
    extended_key_usage:
    - client_auth
  type: certificate
- name: pxc_server_ca
  options:
    common_name: pxc_server_ca
    is_ca: true
  type: certificate
- name: mysql_server_certificate
  options:
    alternative_names:
    - ((deployment_name))-database
    - '*.((deployment_name))-database'
    ca: pxc_server_ca
    common_name: ((deployment_name))-database
  type: certificate
- name: loggregator_rlp_gateway_tls
  options:
    alternative_names:
    - log-stream.((system_domain))
    - log-api.service.cf.internal
    - ((deployment_name))-log-api
    - '*.((deployment_name))-log-api'
    ca: service_cf_internal_ca
    common_name: log-stream.((system_domain))
  type: certificate
- name: loggregator_trafficcontroller_tls
  options:
    alternative_names:
    - doppler.((system_domain))
    - log-api.service.cf.internal
    - ((deployment_name))-log-api
    - '*.((deployment_name))-log-api'
    ca: service_cf_internal_ca
    common_name: doppler.((system_domain))
  type: certificate
